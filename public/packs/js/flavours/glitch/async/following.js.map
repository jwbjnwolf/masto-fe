{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/following/index.jsx"],"names":["RemoteHint","_ref2","url","_jsx","TimelineHint","resource","FormattedMessage","id","defaultMessage","Following","ImmutablePureComponent","constructor","arguments","handleLoadMore","_debounce","this","props","dispatch","expandFollowing","accountId","leading","setRef","c","column","handleHeaderClick","scrollTop","_load","isAccount","fetchAccount","fetchFollowing","componentDidMount","params","acct","lookupAccount","componentDidUpdate","prevProps","render","accountIds","hasMore","multiColumn","isLoading","suspended","hidden","remote","remoteUrl","BundleColumnError","errorType","Column","LoadingIndicator","emptyMessage","forceEmptyState","LimitedAccountHint","isEmpty","remoteMessage","_jsxs","ref","children","ProfileColumnHeader","onClick","ScrollableList","scrollKey","onLoadMore","prepend","HeaderContainer","hideTabs","alwaysPrepend","append","bindToDocument","map","AccountContainer","withNote","propTypes","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool","connect","mapStateToProps","state","_ref","getIn","normalizeForLookup","getAccountHidden"],"mappings":"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","file":"js/flavours/glitch/async/following.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport {\n  lookupAccount,\n  fetchAccount,\n  fetchFollowing,\n  expandFollowing,\n} from 'flavours/glitch/actions/accounts';\nimport { LoadingIndicator } from 'flavours/glitch/components/loading_indicator';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport { TimelineHint } from 'flavours/glitch/components/timeline_hint';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport ProfileColumnHeader from 'flavours/glitch/features/account/components/profile_column_header';\nimport HeaderContainer from 'flavours/glitch/features/account_timeline/containers/header_container';\nimport BundleColumnError from 'flavours/glitch/features/ui/components/bundle_column_error';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport { normalizeForLookup } from 'flavours/glitch/reducers/accounts_map';\nimport { getAccountHidden } from 'flavours/glitch/selectors';\n\nimport LimitedAccountHint from '../account_timeline/components/limited_account_hint';\n\nconst mapStateToProps = (state, { params: { acct, id } }) => {\n  const accountId = id || state.getIn(['accounts_map', normalizeForLookup(acct)]);\n\n  if (!accountId) {\n    return {\n      isLoading: true,\n    };\n  }\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    accountIds: state.getIn(['user_lists', 'following', accountId, 'items']),\n    hasMore: !!state.getIn(['user_lists', 'following', accountId, 'next']),\n    isLoading: state.getIn(['user_lists', 'following', accountId, 'isLoading'], true),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.follows' defaultMessage='Follows' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nclass Following extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, isAccount, dispatch } = this.props;\n\n    if (!isAccount) dispatch(fetchAccount(accountId));\n    dispatch(fetchFollowing(accountId));\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFollowing(this.props.accountId));\n  }, 300, { leading: true });\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  render () {\n    const { accountId, accountIds, hasMore, isAccount, multiColumn, isLoading, suspended, hidden, remote, remoteUrl } = this.props;\n\n    if (!isAccount) {\n      return (\n        <BundleColumnError multiColumn={multiColumn} errorType='routing' />\n      );\n    }\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (remote && accountIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='account.follows.empty' defaultMessage=\"This user doesn't follow anyone yet.\" />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column ref={this.setRef}>\n        <ProfileColumnHeader onClick={this.handleHeaderClick} multiColumn={multiColumn} />\n\n        <ScrollableList\n          scrollKey='following'\n          hasMore={!forceEmptyState && hasMore}\n          isLoading={isLoading}\n          onLoadMore={this.handleLoadMore}\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs />}\n          alwaysPrepend\n          append={remoteMessage}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Following);\n"],"sourceRoot":""}