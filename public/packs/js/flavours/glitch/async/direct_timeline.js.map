{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/components/column_settings.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/containers/column_settings_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/components/avatar_composite.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/components/conversation.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/containers/conversation_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/components/conversations_list.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/containers/conversations_list_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/direct_timeline/index.jsx"],"names":["messages","defineMessages","filter_regex","id","defaultMessage","settings","ColumnSettings","PureComponent","render","onChange","intl","this","props","_jsx","className","FormattedMessage","SettingToggle","settingPath","label","SettingText","formatMessage","injectIntl","connect","state","getIn","dispatch","path","checked","changeSetting","AvatarComposite","renderItem","account","size","index","animate","width","height","top","left","bottom","right","style","backgroundSize","backgroundImage","get","accounts","take","map","i","Math","min","defaultProps","autoPlayGif","more","open","reply","markAsRead","delete","muteConversation","unmuteConversation","Conversation","ImmutablePureComponent","constructor","arguments","isExpanded","undefined","parseClick","e","destination","router","context","lastStatus","unread","markRead","button","ctrlKey","altKey","metaKey","history","push","preventDefault","handleMouseEnter","_ref","currentTarget","emojis","querySelectorAll","length","emoji","src","getAttribute","handleMouseLeave","_ref2","handleClick","handleMarkAsRead","handleReply","handleDelete","handleHotkeyMoveUp","onMoveUp","conversationId","handleHotkeyMoveDown","onMoveDown","handleConversationMute","onMute","handleShowMore","onToggleHidden","setExpansion","value","setState","scrollKey","menu","text","action","names","a","Permalink","to","href","title","dangerouslySetInnerHTML","__html","reduce","prev","cur","handlers","moveUp","moveDown","toggleHidden","media","AttachmentList","compact","HotKeys","classNames","tabIndex","onClick","role","RelativeTimestamp","timestamp","onMouseEnter","onMouseLeave","values","StatusContent","status","expanded","onExpandedToggle","collapsible","IconButton","icon","DropdownMenuContainer","items","direction","contextTypes","PropTypes","object","propTypes","string","isRequired","ImmutablePropTypes","list","bool","func","replyConfirm","replyMessage","mapStateToProps","getStatus","makeGetStatus","conversation","find","x","lastStatusId","accountId","mapDispatchToProps","markConversationRead","_","getState","trim","openModal","modalType","modalProps","message","confirm","onConfirm","replyCompose","deleteConversation","unmuteStatus","muteStatus","revealStatus","hideStatus","ConversationsList","getCurrentIndex","conversations","findIndex","handleMoveUp","elementIndex","_selectChild","handleMoveDown","setRef","c","node","handleLoadOlder","_debounce","last","onLoadMore","leading","align_top","container","element","querySelector","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","isLoading","other","_jsx2","ScrollableList","showLoading","isEmpty","ref","children","item","ConversationContainer","hasMore","maxId","expandConversations","DirectTimeline","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","handleLoadMoreTimeline","expandDirectTimeline","handleLoadMoreConversations","componentDidMount","conversationsMode","mountConversations","disconnect","connectDirectStream","componentDidUpdate","prevProps","componentWillUnmount","unmountConversations","hasUnread","multiColumn","pinned","contents","ConversationsListContainer","trackScroll","timelineId","bindToDocument","handleLoadMore","prepend","target","alwaysPrepend","emptyMessage","StatusListContainer","_jsxs","Column","ColumnHeader","active","onPin","onMove","ColumnSettingsContainer","Helmet","name","content"],"mappings":"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","file":"js/flavours/glitch/async/direct_timeline.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport SettingToggle from 'flavours/glitch/features/notifications/components/setting_toggle';\n\nimport SettingText from '../../../components/setting_text';\n\nconst messages = defineMessages({\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n  settings: { id: 'home.settings', defaultMessage: 'Column settings' },\n});\n\nclass ColumnSettings extends PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { settings, onChange, intl } = this.props;\n\n    return (\n      <div>\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.basic' defaultMessage='Basic' /></span>\n\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['conversations']} onChange={onChange} label={<FormattedMessage id='direct.group_by_conversations' defaultMessage='Group by conversation' />} />\n        </div>\n\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></span>\n\n        <div className='column-settings__row'>\n          <SettingText settings={settings} settingPath={['regex', 'body']} onChange={onChange} label={intl.formatMessage(messages.filter_regex)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(ColumnSettings);\n","import { connect } from 'react-redux';\n\nimport { changeSetting } from 'flavours/glitch/actions/settings';\n\nimport ColumnSettings from '../components/column_settings';\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'direct']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n\n  onChange (path, checked) {\n    dispatch(changeSetting(['direct', ...path], checked));\n  },\n\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { autoPlayGif } from 'flavours/glitch/initial_state';\n\nexport default class AvatarComposite extends PureComponent {\n\n  static propTypes = {\n    accounts: ImmutablePropTypes.list.isRequired,\n    animate: PropTypes.bool,\n    size: PropTypes.number.isRequired,\n  };\n\n  static defaultProps = {\n    animate: autoPlayGif,\n  };\n\n  renderItem (account, size, index) {\n    const { animate } = this.props;\n\n    let width  = 50;\n    let height = 100;\n    let top    = 'auto';\n    let left   = 'auto';\n    let bottom = 'auto';\n    let right  = 'auto';\n\n    if (size === 1) {\n      width = 100;\n    }\n\n    if (size === 4 || (size === 3 && index > 0)) {\n      height = 50;\n    }\n\n    if (size === 2) {\n      if (index === 0) {\n        right = '1px';\n      } else {\n        left = '1px';\n      }\n    } else if (size === 3) {\n      if (index === 0) {\n        right = '1px';\n      } else if (index > 0) {\n        left = '1px';\n      }\n\n      if (index === 1) {\n        bottom = '1px';\n      } else if (index > 1) {\n        top = '1px';\n      }\n    } else if (size === 4) {\n      if (index === 0 || index === 2) {\n        right = '1px';\n      }\n\n      if (index === 1 || index === 3) {\n        left = '1px';\n      }\n\n      if (index < 2) {\n        bottom = '1px';\n      } else {\n        top = '1px';\n      }\n    }\n\n    const style = {\n      left: left,\n      top: top,\n      right: right,\n      bottom: bottom,\n      width: `${width}%`,\n      height: `${height}%`,\n      backgroundSize: 'cover',\n      backgroundImage: `url(${account.get(animate ? 'avatar' : 'avatar_static')})`,\n    };\n\n    return (\n      <div key={account.get('id')} style={style} data-avatar-of={`@${account.get('acct')}`} />\n    );\n  }\n\n  render() {\n    const { accounts, size } = this.props;\n\n    return (\n      <div className='account__avatar-composite' style={{ width: `${size}px`, height: `${size}px` }}>\n        {accounts.take(4).map((account, i) => this.renderItem(account, Math.min(accounts.size, 4), i))}\n\n        {accounts.size > 4 && (\n          <span className='account__avatar-composite__label'>\n            +{accounts.size - 4}\n          </span>\n        )}\n      </div>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { HotKeys } from 'react-hotkeys';\n\nimport AttachmentList from 'flavours/glitch/components/attachment_list';\nimport AvatarComposite from 'flavours/glitch/components/avatar_composite';\nimport { IconButton } from 'flavours/glitch/components/icon_button';\nimport Permalink from 'flavours/glitch/components/permalink';\nimport { RelativeTimestamp } from 'flavours/glitch/components/relative_timestamp';\nimport StatusContent from 'flavours/glitch/components/status_content';\nimport DropdownMenuContainer from 'flavours/glitch/containers/dropdown_menu_container';\nimport { autoPlayGif } from 'flavours/glitch/initial_state';\n\nconst messages = defineMessages({\n  more: { id: 'status.more', defaultMessage: 'More' },\n  open: { id: 'conversation.open', defaultMessage: 'View conversation' },\n  reply: { id: 'status.reply', defaultMessage: 'Reply' },\n  markAsRead: { id: 'conversation.mark_as_read', defaultMessage: 'Mark as read' },\n  delete: { id: 'conversation.delete', defaultMessage: 'Delete conversation' },\n  muteConversation: { id: 'status.mute_conversation', defaultMessage: 'Mute conversation' },\n  unmuteConversation: { id: 'status.unmute_conversation', defaultMessage: 'Unmute conversation' },\n});\n\nclass Conversation extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object,\n  };\n\n  static propTypes = {\n    conversationId: PropTypes.string.isRequired,\n    accounts: ImmutablePropTypes.list.isRequired,\n    lastStatus: ImmutablePropTypes.map,\n    unread:PropTypes.bool.isRequired,\n    scrollKey: PropTypes.string,\n    onMoveUp: PropTypes.func,\n    onMoveDown: PropTypes.func,\n    markRead: PropTypes.func.isRequired,\n    delete: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    isExpanded: undefined,\n  };\n\n  parseClick = (e, destination) => {\n    const { router } = this.context;\n    const { lastStatus, unread, markRead } = this.props;\n    if (!router) return;\n\n    if (e.button === 0 && !(e.ctrlKey || e.altKey || e.metaKey)) {\n      if (destination === undefined) {\n        if (unread) {\n          markRead();\n        }\n        destination = `/statuses/${lastStatus.get('id')}`;\n      }\n      router.history.push(destination);\n      e.preventDefault();\n    }\n  };\n\n  handleMouseEnter = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-original');\n    }\n  };\n\n  handleMouseLeave = ({ currentTarget }) => {\n    if (autoPlayGif) {\n      return;\n    }\n\n    const emojis = currentTarget.querySelectorAll('.custom-emoji');\n\n    for (var i = 0; i < emojis.length; i++) {\n      let emoji = emojis[i];\n      emoji.src = emoji.getAttribute('data-static');\n    }\n  };\n\n  handleClick = () => {\n    if (!this.context.router) {\n      return;\n    }\n\n    const { lastStatus, unread, markRead } = this.props;\n\n    if (unread) {\n      markRead();\n    }\n\n    this.context.router.history.push(`/@${lastStatus.getIn(['account', 'acct'])}/${lastStatus.get('id')}`);\n  };\n\n  handleMarkAsRead = () => {\n    this.props.markRead();\n  };\n\n  handleReply = () => {\n    this.props.reply(this.props.lastStatus, this.context.router.history);\n  };\n\n  handleDelete = () => {\n    this.props.delete();\n  };\n\n  handleHotkeyMoveUp = () => {\n    this.props.onMoveUp(this.props.conversationId);\n  };\n\n  handleHotkeyMoveDown = () => {\n    this.props.onMoveDown(this.props.conversationId);\n  };\n\n  handleConversationMute = () => {\n    this.props.onMute(this.props.lastStatus);\n  };\n\n  handleShowMore = () => {\n    this.props.onToggleHidden(this.props.lastStatus);\n\n    if (this.props.lastStatus.get('spoiler_text')) {\n      this.setExpansion(!this.state.isExpanded);\n    }\n  };\n\n  setExpansion = value => {\n    this.setState({ isExpanded: value });\n  };\n\n  render () {\n    const { accounts, lastStatus, unread, scrollKey, intl } = this.props;\n\n    if (lastStatus === null) {\n      return null;\n    }\n\n    const isExpanded = this.props.settings.getIn(['content_warnings', 'shared_state']) ? !lastStatus.get('hidden') : this.state.isExpanded;\n\n    const menu = [\n      { text: intl.formatMessage(messages.open), action: this.handleClick },\n      null,\n    ];\n\n    menu.push({ text: intl.formatMessage(lastStatus.get('muted') ? messages.unmuteConversation : messages.muteConversation), action: this.handleConversationMute });\n\n    if (unread) {\n      menu.push({ text: intl.formatMessage(messages.markAsRead), action: this.handleMarkAsRead });\n      menu.push(null);\n    }\n\n    menu.push({ text: intl.formatMessage(messages.delete), action: this.handleDelete });\n\n    const names = accounts.map(a => <Permalink to={`/@${a.get('acct')}`} href={a.get('url')} key={a.get('id')} title={a.get('acct')}><bdi><strong className='display-name__html' dangerouslySetInnerHTML={{ __html: a.get('display_name_html') }} /></bdi></Permalink>).reduce((prev, cur) => [prev, ', ', cur]);\n\n    const handlers = {\n      reply: this.handleReply,\n      open: this.handleClick,\n      moveUp: this.handleHotkeyMoveUp,\n      moveDown: this.handleHotkeyMoveDown,\n      toggleHidden: this.handleShowMore,\n    };\n\n    let media = null;\n    if (lastStatus.get('media_attachments').size > 0) {\n      media = <AttachmentList compact media={lastStatus.get('media_attachments')} />;\n    }\n\n    return (\n      <HotKeys handlers={handlers}>\n        <div className={classNames('conversation focusable muted', { 'conversation--unread': unread })} tabIndex={0}>\n          <div className='conversation__avatar' onClick={this.handleClick} role='presentation'>\n            <AvatarComposite accounts={accounts} size={48} />\n          </div>\n\n          <div className='conversation__content'>\n            <div className='conversation__content__info'>\n              <div className='conversation__content__relative-time'>\n                {unread && <span className='conversation__unread' />} <RelativeTimestamp timestamp={lastStatus.get('created_at')} />\n              </div>\n\n              <div className='conversation__content__names' onMouseEnter={this.handleMouseEnter} onMouseLeave={this.handleMouseLeave}>\n                <FormattedMessage id='conversation.with' defaultMessage='With {names}' values={{ names: <span>{names}</span> }} />\n              </div>\n            </div>\n\n            <StatusContent\n              status={lastStatus}\n              parseClick={this.parseClick}\n              expanded={isExpanded}\n              onExpandedToggle={this.handleShowMore}\n              collapsible\n              media={media}\n            />\n\n            <div className='status__action-bar'>\n              <IconButton className='status__action-bar-button' title={intl.formatMessage(messages.reply)} icon='reply' onClick={this.handleReply} />\n\n              <div className='status__action-bar-dropdown'>\n                <DropdownMenuContainer\n                  scrollKey={scrollKey}\n                  status={lastStatus}\n                  items={menu}\n                  icon='ellipsis-h'\n                  size={18}\n                  direction='right'\n                  title={intl.formatMessage(messages.more)}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n\nexport default injectIntl(Conversation);\n","import { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport { replyCompose } from 'flavours/glitch/actions/compose';\nimport { markConversationRead, deleteConversation } from 'flavours/glitch/actions/conversations';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport { muteStatus, unmuteStatus, hideStatus, revealStatus } from 'flavours/glitch/actions/statuses';\nimport { makeGetStatus } from 'flavours/glitch/selectors';\n\nimport Conversation from '../components/conversation';\n\nconst messages = defineMessages({\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: { id: 'confirmations.reply.message', defaultMessage: 'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?' },\n});\n\nconst mapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  return (state, { conversationId }) => {\n    const conversation = state.getIn(['conversations', 'items']).find(x => x.get('id') === conversationId);\n    const lastStatusId = conversation.get('last_status', null);\n\n    return {\n      accounts: conversation.get('accounts').map(accountId => state.getIn(['accounts', accountId], null)),\n      unread: conversation.get('unread'),\n      lastStatus: lastStatusId && getStatus(state, { id: lastStatusId }),\n      settings: state.get('local_settings'),\n    };\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl, conversationId }) => ({\n\n  markRead () {\n    dispatch(markConversationRead(conversationId));\n  },\n\n  reply (status, router) {\n    dispatch((_, getState) => {\n      let state = getState();\n\n      if (state.getIn(['compose', 'text']).trim().length !== 0) {\n        dispatch(openModal({\n          modalType: 'CONFIRM',\n          modalProps: {\n            message: intl.formatMessage(messages.replyMessage),\n            confirm: intl.formatMessage(messages.replyConfirm),\n            onConfirm: () => dispatch(replyCompose(status, router)),\n          },\n        }));\n      } else {\n        dispatch(replyCompose(status, router));\n      }\n    });\n  },\n\n  delete () {\n    dispatch(deleteConversation(conversationId));\n  },\n\n  onMute (status) {\n    if (status.get('muted')) {\n      dispatch(unmuteStatus(status.get('id')));\n    } else {\n      dispatch(muteStatus(status.get('id')));\n    }\n  },\n\n  onToggleHidden (status) {\n    if (status.get('hidden')) {\n      dispatch(revealStatus(status.get('id')));\n    } else {\n      dispatch(hideStatus(status.get('id')));\n    }\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Conversation));\n","import PropTypes from 'prop-types';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { debounce } from 'lodash';\n\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\n\nimport ConversationContainer from '../containers/conversation_container';\n\nexport default class ConversationsList extends ImmutablePureComponent {\n\n  static propTypes = {\n    conversations: ImmutablePropTypes.list.isRequired,\n    scrollKey: PropTypes.string.isRequired,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    onLoadMore: PropTypes.func,\n  };\n\n  getCurrentIndex = id => this.props.conversations.findIndex(x => x.get('id') === id);\n\n  handleMoveUp = id => {\n    const elementIndex = this.getCurrentIndex(id) - 1;\n    this._selectChild(elementIndex, true);\n  };\n\n  handleMoveDown = id => {\n    const elementIndex = this.getCurrentIndex(id) + 1;\n    this._selectChild(elementIndex, false);\n  };\n\n  _selectChild (index, align_top) {\n    const container = this.node.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  setRef = c => {\n    this.node = c;\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.conversations.last();\n\n    if (last && last.get('last_status')) {\n      this.props.onLoadMore(last.get('last_status'));\n    }\n  }, 300, { leading: true });\n\n  render () {\n    const { conversations, isLoading, onLoadMore, ...other } = this.props;\n\n    return (\n      <ScrollableList {...other} isLoading={isLoading} showLoading={isLoading && conversations.isEmpty()} onLoadMore={onLoadMore && this.handleLoadOlder} ref={this.setRef}>\n        {conversations.map(item => (\n          <ConversationContainer\n            key={item.get('id')}\n            conversationId={item.get('id')}\n            onMoveUp={this.handleMoveUp}\n            onMoveDown={this.handleMoveDown}\n            scrollKey={this.props.scrollKey}\n          />\n        ))}\n      </ScrollableList>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\n\nimport { expandConversations } from 'flavours/glitch/actions/conversations';\n\nimport ConversationsList from '../components/conversations_list';\n\nconst mapStateToProps = state => ({\n  conversations: state.getIn(['conversations', 'items']),\n  isLoading: state.getIn(['conversations', 'isLoading'], true),\n  hasMore: state.getIn(['conversations', 'hasMore'], false),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onLoadMore: maxId => dispatch(expandConversations({ maxId })),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConversationsList);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { connect } from 'react-redux';\n\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { mountConversations, unmountConversations, expandConversations } from 'flavours/glitch/actions/conversations';\nimport { connectDirectStream } from 'flavours/glitch/actions/streaming';\nimport { expandDirectTimeline } from 'flavours/glitch/actions/timelines';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\n\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport ConversationsListContainer from './containers/conversations_list_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.direct', defaultMessage: 'Private mentions' },\n});\n\nconst mapStateToProps = state => ({\n  hasUnread: state.getIn(['timelines', 'direct', 'unread']) > 0,\n  conversationsMode: state.getIn(['settings', 'direct', 'conversations']),\n});\n\nclass DirectTimeline extends PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    conversationsMode: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECT', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, conversationsMode } = this.props;\n\n    dispatch(mountConversations());\n\n    if (conversationsMode) {\n      dispatch(expandConversations());\n    } else {\n      dispatch(expandDirectTimeline());\n    }\n\n    this.disconnect = dispatch(connectDirectStream());\n  }\n\n  componentDidUpdate(prevProps) {\n    const { dispatch, conversationsMode } = this.props;\n\n    if (prevProps.conversationsMode && !conversationsMode) {\n      dispatch(expandDirectTimeline());\n    } else if (!prevProps.conversationsMode && conversationsMode) {\n      dispatch(expandConversations());\n    }\n  }\n\n  componentWillUnmount () {\n    this.props.dispatch(unmountConversations());\n\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMoreTimeline = maxId => {\n    this.props.dispatch(expandDirectTimeline({ maxId }));\n  };\n\n  handleLoadMoreConversations = maxId => {\n    this.props.dispatch(expandConversations({ maxId }));\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, conversationsMode } = this.props;\n    const pinned = !!columnId;\n\n    let contents;\n    if (conversationsMode) {\n      contents = (\n        <ConversationsListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          bindToDocument={!multiColumn}\n          onLoadMore={this.handleLoadMore}\n          prepend={<div className='follow_requests-unlocked_explanation'><span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span></div>}\n          alwaysPrepend\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any private mentions yet. When you send or receive one, it will show up here.\" />}\n        />\n      );\n    } else {\n      contents = (\n        <StatusListContainer\n          trackScroll={!pinned}\n          scrollKey={`direct_timeline-${columnId}`}\n          timelineId='direct'\n          bindToDocument={!multiColumn}\n          onLoadMore={this.handleLoadMoreTimeline}\n          prepend={<div className='follow_requests-unlocked_explanation'><span><FormattedMessage id='compose_form.encryption_warning' defaultMessage='Posts on Mastodon are not end-to-end encrypted. Do not share any dangerous information over Mastodon.' /> <a href='/terms' target='_blank'><FormattedMessage id='compose_form.direct_message_warning_learn_more' defaultMessage='Learn more' /></a></span></div>}\n          alwaysPrepend\n          emptyMessage={<FormattedMessage id='empty_column.direct' defaultMessage=\"You don't have any private mentions yet. When you send or receive one, it will show up here.\" />}\n        />\n      );\n    }\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='envelope'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        {contents}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(DirectTimeline));\n"],"sourceRoot":""}