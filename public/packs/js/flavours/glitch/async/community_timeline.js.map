{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/community_timeline/components/column_settings.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/community_timeline/containers/column_settings_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/community_timeline/index.jsx"],"names":["messages","defineMessages","filter_regex","id","defaultMessage","settings","ColumnSettings","PureComponent","render","onChange","intl","this","props","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","SettingText","formatMessage","injectIntl","connect","mapStateToProps","state","_ref","columnId","uuid","columns","getIn","index","findIndex","c","get","mapDispatchToProps","dispatch","_ref2","key","checked","changeColumnParams","changeSetting","title","CommunityTimeline","constructor","arguments","handlePin","onlyMedia","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandCommunityTimeline","componentDidMount","signedIn","context","identity","disconnect","connectCommunityStream","componentDidUpdate","prevProps","componentWillUnmount","hasUnread","multiColumn","pinned","_jsxs","Column","ref","name","bindToDocument","children","ColumnHeader","icon","active","onPin","onMove","onClick","ColumnSettingsContainer","StatusListContainer","prepend","DismissableBanner","values","domain","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","regex","Helmet","content","defaultProps","contextTypes","router","PropTypes","object","timelineState"],"mappings":"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","file":"js/flavours/glitch/async/community_timeline.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport SettingText from 'flavours/glitch/components/setting_text';\nimport SettingToggle from 'flavours/glitch/features/notifications/components/setting_toggle';\n\nconst messages = defineMessages({\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n  settings: { id: 'home.settings', defaultMessage: 'Column settings' },\n});\n\nclass ColumnSettings extends PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange, intl } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n        </div>\n\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></span>\n\n        <div className='column-settings__row'>\n          <SettingText settings={settings} settingPath={['regex', 'body']} onChange={onChange} label={intl.formatMessage(messages.filter_regex)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(ColumnSettings);\n","import { connect } from 'react-redux';\n\nimport { changeColumnParams } from 'flavours/glitch/actions/columns';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\n\nimport ColumnSettings from '../components/column_settings';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'community']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['community', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { connect } from 'react-redux';\n\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { connectCommunityStream } from 'flavours/glitch/actions/streaming';\nimport { expandCommunityTimeline } from 'flavours/glitch/actions/timelines';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { DismissableBanner } from 'flavours/glitch/components/dismissable_banner';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport { domain } from 'flavours/glitch/initial_state';\n\nimport ColumnSettingsContainer from './containers/column_settings_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.community', defaultMessage: 'Local timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'community', 'other', 'onlyMedia']);\n  const regex = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'regex', 'body']) : state.getIn(['settings', 'community', 'regex', 'body']);\n  const timelineState = state.getIn(['timelines', `community${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n    regex,\n  };\n};\n\nclass CommunityTimeline extends PureComponent {\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n    regex: PropTypes.string,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('COMMUNITY', { other: { onlyMedia } }));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, onlyMedia } = this.props;\n    const { signedIn } = this.context.identity;\n\n    dispatch(expandCommunityTimeline({ onlyMedia }));\n\n    if (signedIn) {\n      this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { signedIn } = this.context.identity;\n\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      const { dispatch, onlyMedia } = this.props;\n\n      if (this.disconnect) {\n        this.disconnect();\n      }\n\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n\n      if (signedIn) {\n        this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, onlyMedia } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column ref={this.setRef} name='local' bindToDocument={!multiColumn} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='users'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          prepend={<DismissableBanner id='community_timeline'><FormattedMessage id='dismissable_banner.community_timeline' defaultMessage='These are the most recent public posts from people whose accounts are hosted by {domain}.' values={{ domain }} /></DismissableBanner>}\n          trackScroll={!pinned}\n          scrollKey={`community_timeline-${columnId}`}\n          timelineId={`community${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.community' defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!' />}\n          bindToDocument={!multiColumn}\n          regex={this.props.regex}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(CommunityTimeline));\n"],"sourceRoot":""}