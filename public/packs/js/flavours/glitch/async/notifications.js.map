{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/components/notification_purge_buttons.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/containers/notification_purge_buttons_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/notifications_permission_banner.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/clear_column_button.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/grant_permission_button.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/pill_bar_button.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/column_settings.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/containers/column_settings_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/filter_bar.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/containers/filter_bar_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/report.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/admin_report.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/containers/admin_report_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/follow_request.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/containers/follow_request_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/admin_signup.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/follow.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/components/notification.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/containers/notification_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/notifications/index.jsx"],"names":["messages","defineMessages","btnAll","id","defaultMessage","btnNone","btnInvert","btnApply","NotificationPurgeButtons","ImmutablePureComponent","render","intl","markNewForDelete","this","props","_jsx","className","onClick","onMarkAll","classNames","active","formatMessage","onMarkNone","onInvert","onDeleteMarked","Icon","propTypes","PropTypes","func","isRequired","object","bool","injectIntl","clearMessage","clearConfirm","connect","state","getIn","mapDispatchToProps","dispatch","_ref","onEnterCleaningMode","yes","enterNotificationClearingMode","openModal","modalType","modalProps","message","confirm","onConfirm","deleteMarkedNotifications","markAllNotifications","close","NotificationsPermissionBanner","PureComponent","constructor","arguments","handleClick","requestBrowserPermission","handleClose","changeSetting","IconButton","icon","title","FormattedMessage","values","Button","ClearColumnButton","Component","tabIndex","GrantPermissionButton","PillBarButton","onChange","settings","settingPath","prefix","label","disabled","filter","Boolean","join","ColumnSettings","onPushChange","path","checked","pushSettings","onClear","alertsEnabled","browserSupport","browserPermission","onRequestNotificationPermission","unreadMarkersShowStr","filterBarShowStr","filterAdvancedStr","alertStr","showStr","soundStr","showPushSettings","get","pushStr","role","SettingToggle","context","identity","permissions","PERMISSION_MANAGE_USERS","PERMISSION_MANAGE_REPORTS","contextTypes","permissionDenied","includes","window","Notification","permission","changePushNotifications","slice","showAlert","undefined","setFilter","clearNotifications","tooltips","mentions","favourites","boosts","polls","follows","statuses","FilterBar","notificationType","selectFilter","selectedFilter","advancedMode","fixedWidth","newActiveFilter","openReport","other","spam","legal","violation","Report","hidden","report","account","_Fragment","children","_jsx2","AvatarOverlay","friend","RelativeTimestamp","timestamp","short","count","size","href","target","rel","ImmutablePropTypes","map","AdminReport","handleMoveUp","notification","onMoveUp","handleMoveDown","onMoveDown","handleOpen","handleOpenProfile","router","history","push","handleMention","e","preventDefault","onMention","getHandlers","moveUp","moveDown","open","openProfile","mention","reply","unread","displayName","link","Permalink","to","dangerouslySetInnerHTML","__html","targetAccount","targetDisplayNameHtml","targetLink","HotKeys","handlers","name","NotificationOverlayContainer","string","mapStateToProps","getReport","makeGetReport","authorize","reject","FollowRequest","onAuthorize","onReject","_jsxs","Avatar","DisplayName","authorizeFollowRequest","rejectFollowRequest","NotificationFollow","AccountContainer","withNote","getScrollPosition","updateScrollBottom","NotificationFollowRequestContainer","NotificationAdminSignup","NotificationAdminReportContainer","StatusContainer","containerId","contextType","cachedMediaWidth","cacheMediaWidth","onUnmount","withDismiss","prepend","muted","number","makeMapStateToProps","getNotification","makeGetNotification","accountId","notifCleaning","mentionCompose","enterNotifCleaning","markAsRead","getExcludedTypes","createSelector","shows","ImmutableList","item","keys","getNotifications","showFilterBar","allowedType","excludedTypes","notifications","filterNot","Notifications","animatingNCD","handleLoadGap","maxId","expandNotifications","handleLoadOlder","_debounce","last","leading","handleLoadPending","loadPending","handleScrollToTop","scrollTopNotifications","handleScroll","handlePin","columnId","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setColumnRef","c","elementIndex","findIndex","_selectChild","handleTransitionEndNCD","setState","notifCleaningActive","handleMarkAsRead","markNotificationsAsRead","submitMarkers","immediate","componentDidMount","mountNotifications","componentWillUnmount","cancel","unmountNotifications","index","align_top","container","node","element","querySelector","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","isLoading","isUnread","multiColumn","hasMore","numPending","lastReadId","canMarkAsRead","needsNotificationPermission","pinned","emptyMessage","signedIn","scrollableContent","filterBarContainer","FilterBarContainer","scrollContainer","LoadGap","NotificationContainer","compareId","ScrollableList","scrollKey","trackScroll","showLoading","alwaysPrepend","onLoadMore","onLoadPending","onScrollToTop","onScroll","bindToDocument","NotSignedInIndicator","extraButtons","notifCleaningButtonClassName","notifCleaningDrawerClassName","msgEnterNotifCleaning","notifCleaningDrawer","onTransitionEnd","NotificationPurgeButtonsContainer","Column","ref","extraClasses","ColumnHeader","onPin","onMove","localSettings","extraButton","appendContent","ColumnSettingsContainer","Helmet","content","defaultProps","some"],"mappings":"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","file":"js/flavours/glitch/async/notifications.js","sourcesContent":["/**\n * Buttons widget for controlling the notification clearing mode.\n * In idle state, the cleaning mode button is shown. When the mode is active,\n * a Confirm and Abort buttons are shown in its place.\n */\n\n\n//  Package imports  //\nimport PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { Icon } from 'flavours/glitch/components/icon';\n\nconst messages = defineMessages({\n  btnAll : { id: 'notification_purge.btn_all', defaultMessage: 'Select\\nall' },\n  btnNone : { id: 'notification_purge.btn_none', defaultMessage: 'Select\\nnone' },\n  btnInvert : { id: 'notification_purge.btn_invert', defaultMessage: 'Invert\\nselection' },\n  btnApply : { id: 'notification_purge.btn_apply', defaultMessage: 'Clear\\nselected' },\n});\n\nclass NotificationPurgeButtons extends ImmutablePureComponent {\n\n  static propTypes = {\n    onDeleteMarked : PropTypes.func.isRequired,\n    onMarkAll : PropTypes.func.isRequired,\n    onMarkNone : PropTypes.func.isRequired,\n    onInvert : PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    markNewForDelete: PropTypes.bool,\n  };\n\n  render () {\n    const { intl, markNewForDelete } = this.props;\n\n    //className='active'\n    return (\n      <div className='column-header__notif-cleaning-buttons'>\n        <button onClick={this.props.onMarkAll} className={classNames('column-header__button', { active: markNewForDelete })}>\n          <b>∀</b><br />{intl.formatMessage(messages.btnAll)}\n        </button>\n\n        <button onClick={this.props.onMarkNone} className={classNames('column-header__button', { active: !markNewForDelete })}>\n          <b>∅</b><br />{intl.formatMessage(messages.btnNone)}\n        </button>\n\n        <button onClick={this.props.onInvert} className='column-header__button'>\n          <b>¬</b><br />{intl.formatMessage(messages.btnInvert)}\n        </button>\n\n        <button onClick={this.props.onDeleteMarked} className='column-header__button'>\n          <Icon id='trash' /><br />{intl.formatMessage(messages.btnApply)}\n        </button>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(NotificationPurgeButtons);\n","//  Package imports.\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\n//  Our imports.\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport {\n  deleteMarkedNotifications,\n  enterNotificationClearingMode,\n  markAllNotifications,\n} from 'flavours/glitch/actions/notifications';\nimport NotificationPurgeButtons from 'flavours/glitch/components/notification_purge_buttons';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.marked_clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all selected notifications?' },\n  clearConfirm: { id: 'notifications.marked_clear', defaultMessage: 'Clear selected notifications' },\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onEnterCleaningMode(yes) {\n    dispatch(enterNotificationClearingMode(yes));\n  },\n\n  onDeleteMarked() {\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        message: intl.formatMessage(messages.clearMessage),\n        confirm: intl.formatMessage(messages.clearConfirm),\n        onConfirm: () => dispatch(deleteMarkedNotifications()),\n      },\n    }));\n  },\n\n  onMarkAll() {\n    dispatch(markAllNotifications(true));\n  },\n\n  onMarkNone() {\n    dispatch(markAllNotifications(false));\n  },\n\n  onInvert() {\n    dispatch(markAllNotifications(null));\n  },\n});\n\nconst mapStateToProps = state => ({\n  markNewForDelete: state.getIn(['notifications', 'markNewForDelete']),\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(NotificationPurgeButtons));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport { requestBrowserPermission } from 'flavours/glitch/actions/notifications';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\nimport Button from 'flavours/glitch/components/button';\nimport { Icon } from 'flavours/glitch/components/icon';\nimport { IconButton } from 'flavours/glitch/components/icon_button';\n\n\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nclass NotificationsPermissionBanner extends PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleClick = () => {\n    this.props.dispatch(requestBrowserPermission());\n  };\n\n  handleClose = () => {\n    this.props.dispatch(changeSetting(['notifications', 'dismissPermissionBanner'], true));\n  };\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <div className='notifications-permission-banner'>\n        <div className='notifications-permission-banner__close'>\n          <IconButton icon='times' onClick={this.handleClose} title={intl.formatMessage(messages.close)} />\n        </div>\n\n        <h2><FormattedMessage id='notifications_permission_banner.title' defaultMessage='Never miss a thing' /></h2>\n        <p><FormattedMessage id='notifications_permission_banner.how_to_control' defaultMessage=\"To receive notifications when Mastodon isn't open, enable desktop notifications. You can control precisely which types of interactions generate desktop notifications through the {icon} button above once they're enabled.\" values={{ icon: <Icon id='sliders' /> }} /></p>\n        <Button onClick={this.handleClick}><FormattedMessage id='notifications_permission_banner.enable' defaultMessage='Enable desktop notifications' /></Button>\n      </div>\n    );\n  }\n\n}\n\nexport default connect()(injectIntl(NotificationsPermissionBanner));\n","import PropTypes from 'prop-types';\nimport { Component } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Icon } from 'flavours/glitch/components/icon';\n\nexport default class ClearColumnButton extends Component {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex={0} onClick={this.props.onClick}><Icon id='eraser' /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nexport default class GrantPermissionButton extends PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__permission-btn' tabIndex={0} onClick={this.props.onClick}>\n        <FormattedMessage id='notifications.grant_permission' defaultMessage='Grant permission.' />\n      </button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport classNames from 'classnames';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nexport default class PillBarButton extends PureComponent {\n\n  static propTypes = {\n    prefix: PropTypes.string,\n    settings: ImmutablePropTypes.map.isRequired,\n    settingPath: PropTypes.array.isRequired,\n    label: PropTypes.node.isRequired,\n    onChange: PropTypes.func.isRequired,\n    disabled: PropTypes.bool,\n  };\n\n  onChange = () => {\n    const { settings, settingPath } = this.props;\n    this.props.onChange(settingPath, !settings.getIn(settingPath));\n  };\n\n  render () {\n    const { prefix, settings, settingPath, label, disabled } = this.props;\n    const id = ['setting-pillbar-button', prefix, ...settingPath].filter(Boolean).join('-');\n    const active = settings.getIn(settingPath);\n\n    return (\n      <button\n        key={id}\n        id={id}\n        className={classNames('pillbar-button', { active })}\n        disabled={disabled}\n        onClick={this.onChange}\n        aria-pressed={active}\n      >\n        {label}\n      </button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { PERMISSION_MANAGE_USERS, PERMISSION_MANAGE_REPORTS } from 'flavours/glitch/permissions';\n\nimport ClearColumnButton from './clear_column_button';\nimport GrantPermissionButton from './grant_permission_button';\nimport PillBarButton from './pill_bar_button';\nimport SettingToggle from './setting_toggle';\n\nexport default class ColumnSettings extends PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onRequestNotificationPermission: PropTypes.func,\n    alertsEnabled: PropTypes.bool,\n    browserSupport: PropTypes.bool,\n    browserPermission: PropTypes.string,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  };\n\n  render () {\n    const { settings, pushSettings, onChange, onClear, alertsEnabled, browserSupport, browserPermission, onRequestNotificationPermission } = this.props;\n\n    const unreadMarkersShowStr = <FormattedMessage id='notifications.column_settings.unread_notifications.highlight' defaultMessage='Highlight unread notifications' />;\n    const filterBarShowStr = <FormattedMessage id='notifications.column_settings.filter_bar.show_bar' defaultMessage='Show filter bar' />;\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const alertStr = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const showStr = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div>\n        {alertsEnabled && browserSupport && browserPermission === 'denied' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'><FormattedMessage id='notifications.permission_denied' defaultMessage='Desktop notifications are unavailable due to previously denied browser permissions request' /></span>\n          </div>\n        )}\n\n        {alertsEnabled && browserSupport && browserPermission === 'default' && (\n          <div className='column-settings__row column-settings__row--with-margin'>\n            <span className='warning-hint'>\n              <FormattedMessage id='notifications.permission_required' defaultMessage='Desktop notifications are unavailable because the required permission has not been granted.' /> <GrantPermissionButton onClick={onRequestNotificationPermission} />\n            </span>\n          </div>\n        )}\n\n        <div className='column-settings__row'>\n          <ClearColumnButton onClick={onClear} />\n        </div>\n\n        <div role='group' aria-labelledby='notifications-unread-markers'>\n          <span id='notifications-unread-markers' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.unread_notifications.category' defaultMessage='Unread notifications' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='unread-notification-markers' prefix='notifications' settings={settings} settingPath={['showUnread']} onChange={onChange} label={unreadMarkersShowStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-filter-bar'>\n          <span id='notifications-filter-bar' className='column-settings__section'>\n            <FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' />\n          </span>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'show']} onChange={onChange} label={filterBarShowStr} />\n            <SettingToggle id='show-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow'>\n          <span id='notifications-follow' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-follow-request'>\n          <span id='notifications-follow-request' className='column-settings__section'><FormattedMessage id='notifications.column_settings.follow_request' defaultMessage='New follow requests:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow_request']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow_request']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'follow_request']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'follow_request']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-favourite'>\n          <span id='notifications-favourite' className='column-settings__section'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Favorites:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-mention'>\n          <span id='notifications-mention' className='column-settings__section'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-reblog'>\n          <span id='notifications-reblog' className='column-settings__section'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Boosts:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-poll'>\n          <span id='notifications-poll' className='column-settings__section'><FormattedMessage id='notifications.column_settings.poll' defaultMessage='Poll results:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'poll']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'poll']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'poll']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'poll']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-status'>\n          <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.status' defaultMessage='New posts:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'status']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'status']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'status']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'status']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        <div role='group' aria-labelledby='notifications-update'>\n          <span id='notifications-update' className='column-settings__section'><FormattedMessage id='notifications.column_settings.update' defaultMessage='Edits:' /></span>\n\n          <div className='column-settings__pillbar'>\n            <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'update']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'update']} onChange={this.onPushChange} label={pushStr} />}\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'update']} onChange={onChange} label={showStr} />\n            <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'update']} onChange={onChange} label={soundStr} />\n          </div>\n        </div>\n\n        {((this.context.identity.permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS) && (\n          <div role='group' aria-labelledby='notifications-admin-sign-up'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.sign_up' defaultMessage='New sign-ups:' /></span>\n\n            <div className='column-settings__pillbar'>\n              <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.sign_up']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.sign_up']} onChange={this.onPushChange} label={pushStr} />}\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'admin.sign_up']} onChange={onChange} label={showStr} />\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'admin.sign_up']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n\n        {((this.context.identity.permissions & PERMISSION_MANAGE_REPORTS) === PERMISSION_MANAGE_REPORTS) && (\n          <div role='group' aria-labelledby='notifications-admin-report'>\n            <span id='notifications-status' className='column-settings__section'><FormattedMessage id='notifications.column_settings.admin.report' defaultMessage='New reports:' /></span>\n\n            <div className='column-settings__pillbar'>\n              <PillBarButton disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.report']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <PillBarButton prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.report']} onChange={this.onPushChange} label={pushStr} />}\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['shows', 'admin.report']} onChange={onChange} label={showStr} />\n              <PillBarButton prefix='notifications' settings={settings} settingPath={['sounds', 'admin.report']} onChange={onChange} label={soundStr} />\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n\n}\n","import { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport { showAlert } from 'flavours/glitch/actions/alerts';\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport { setFilter, clearNotifications, requestBrowserPermission } from 'flavours/glitch/actions/notifications';\nimport { changeAlerts as changePushNotifications } from 'flavours/glitch/actions/push_notifications';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\n\nimport ColumnSettings from '../components/column_settings';\n\nconst messages = defineMessages({\n  clearMessage: { id: 'notifications.clear_confirmation', defaultMessage: 'Are you sure you want to permanently clear all your notifications?' },\n  clearConfirm: { id: 'notifications.clear', defaultMessage: 'Clear notifications' },\n  permissionDenied: { id: 'notifications.permission_denied_alert', defaultMessage: 'Desktop notifications can\\'t be enabled, as browser permission has been denied before' },\n});\n\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n  alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n  browserSupport: state.getIn(['notifications', 'browserSupport']),\n  browserPermission: state.getIn(['notifications', 'browserPermission']),\n});\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changePushNotifications(path.slice(1), checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changePushNotifications(path.slice(1), checked));\n      }\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setFilter('all'));\n    } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changeSetting(['notifications', ...path], checked));\n          } else {\n            dispatch(showAlert(undefined, messages.permissionDenied));\n          }\n        }));\n      } else {\n        dispatch(changeSetting(['notifications', ...path], checked));\n      }\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n    }\n  },\n\n  onClear () {\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        message: intl.formatMessage(messages.clearMessage),\n        confirm: intl.formatMessage(messages.clearConfirm),\n        onConfirm: () => dispatch(clearNotifications()),\n      },\n    }));\n  },\n\n  onRequestNotificationPermission () {\n    dispatch(requestBrowserPermission());\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Icon } from 'flavours/glitch/components/icon';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: { id: 'notifications.filter.favourites', defaultMessage: 'Favorites' },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },\n  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n  statuses: { id: 'notifications.filter.statuses', defaultMessage: 'Updates from people you follow' },\n});\n\nclass FilterBar extends PureComponent {\n\n  static propTypes = {\n    selectFilter: PropTypes.func.isRequired,\n    selectedFilter: PropTypes.string.isRequired,\n    advancedMode: PropTypes.bool.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  onClick (notificationType) {\n    return () => this.props.selectFilter(notificationType);\n  }\n\n  render () {\n    const { selectedFilter, advancedMode, intl } = this.props;\n    const renderedElement = !advancedMode ? (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n        >\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </button>\n      </div>\n    ) : (\n      <div className='notification__filter-bar'>\n        <button\n          className={selectedFilter === 'all' ? 'active' : ''}\n          onClick={this.onClick('all')}\n        >\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </button>\n        <button\n          className={selectedFilter === 'mention' ? 'active' : ''}\n          onClick={this.onClick('mention')}\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <Icon id='reply-all' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'favourite' ? 'active' : ''}\n          onClick={this.onClick('favourite')}\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'reblog' ? 'active' : ''}\n          onClick={this.onClick('reblog')}\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <Icon id='retweet' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'poll' ? 'active' : ''}\n          onClick={this.onClick('poll')}\n          title={intl.formatMessage(tooltips.polls)}\n        >\n          <Icon id='tasks' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'status' ? 'active' : ''}\n          onClick={this.onClick('status')}\n          title={intl.formatMessage(tooltips.statuses)}\n        >\n          <Icon id='home' fixedWidth />\n        </button>\n        <button\n          className={selectedFilter === 'follow' ? 'active' : ''}\n          onClick={this.onClick('follow')}\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <Icon id='user-plus' fixedWidth />\n        </button>\n      </div>\n    );\n    return renderedElement;\n  }\n\n}\n\nexport default injectIntl(FilterBar);\n","import { connect } from 'react-redux';\n\nimport { setFilter } from '../../../actions/notifications';\nimport FilterBar from '../components/filter_bar';\n\nconst makeMapStateToProps = state => ({\n  selectedFilter: state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  advancedMode: state.getIn(['settings', 'notifications', 'quickFilter', 'advanced']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  selectFilter (newActiveFilter) {\n    dispatch(setFilter(newActiveFilter));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(FilterBar);\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport AvatarOverlay from 'flavours/glitch/components/avatar_overlay';\nimport { RelativeTimestamp } from 'flavours/glitch/components/relative_timestamp';\n\n// This needs to be kept in sync with app/models/report.rb\nconst messages = defineMessages({\n  openReport: { id: 'report_notification.open', defaultMessage: 'Open report' },\n  other: { id: 'report_notification.categories.other', defaultMessage: 'Other' },\n  spam: { id: 'report_notification.categories.spam', defaultMessage: 'Spam' },\n  legal: { id: 'report_notification.categories.legal', defaultMessage: 'Legal' },\n  violation: { id: 'report_notification.categories.violation', defaultMessage: 'Rule violation' },\n});\n\nclass Report extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    report: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  render () {\n    const { intl, hidden, report, account } = this.props;\n\n    if (!report) {\n      return null;\n    }\n\n    if (hidden) {\n      return (\n        <>\n          {report.get('id')}\n        </>\n      );\n    }\n\n    return (\n      <div className='notification__report'>\n        <div className='notification__report__avatar'>\n          <AvatarOverlay account={report.get('target_account')} friend={account} />\n        </div>\n\n        <div className='notification__report__details'>\n          <div>\n            <RelativeTimestamp timestamp={report.get('created_at')} short={false} /> · <FormattedMessage id='report_notification.attached_statuses' defaultMessage='{count, plural, one {# post} other {# posts}} attached' values={{ count: report.get('status_ids').size }} />\n            <br />\n            <strong>{intl.formatMessage(messages[report.get('category')])}</strong>\n          </div>\n\n          <div className='notification__report__actions'>\n            <a href={`/admin/reports/${report.get('id')}`} className='button' target='_blank' rel='noopener noreferrer'>{intl.formatMessage(messages.openReport)}</a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(Report);\n","//  Package imports.\nimport PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { HotKeys } from 'react-hotkeys';\n\n\n// Our imports.\nimport { Icon } from 'flavours/glitch/components/icon';\nimport Permalink from 'flavours/glitch/components/permalink';\n\nimport NotificationOverlayContainer from '../containers/overlay_container';\n\nimport Report from './report';\n\nexport default class AdminReport extends ImmutablePureComponent {\n\n  static propTypes = {\n    hidden: PropTypes.bool,\n    id: PropTypes.string.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n    report: ImmutablePropTypes.map.isRequired,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  };\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  };\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  };\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  };\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  };\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { account, notification, unread, report } = this.props;\n\n    if (!report) {\n      return null;\n    }\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    const targetAccount = report.get('target_account');\n    const targetDisplayNameHtml = { __html: targetAccount.get('display_name_html') };\n    const targetLink = <bdi><Permalink className='notification__display-name' href={targetAccount.get('url')} title={targetAccount.get('acct')} to={`/@${targetAccount.get('acct')}`} dangerouslySetInnerHTML={targetDisplayNameHtml} /></bdi>;\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-report focusable', { unread })} tabIndex={0}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='flag' fixedWidth />\n            </div>\n\n            <span title={notification.get('created_at')}>\n              <FormattedMessage id='notification.admin.report' defaultMessage='{name} reported {target}' values={{ name: link, target: targetLink }} />\n            </span>\n          </div>\n\n          <Report account={account} report={notification.get('report')} hidden={this.props.hidden} />\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\n\nimport { makeGetReport } from 'flavours/glitch/selectors';\n\nimport AdminReport from '../components/admin_report';\n\nconst mapStateToProps = (state, { notification }) => {\n  const getReport = makeGetReport();\n\n  return {\n    report: notification.get('report') ? getReport(state, notification.get('report'), notification.getIn(['report', 'target_account', 'id'])) : null,\n  };\n};\n\nexport default connect(mapStateToProps)(AdminReport);\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { HotKeys } from 'react-hotkeys';\n\nimport { Avatar } from 'flavours/glitch/components/avatar';\nimport { DisplayName } from 'flavours/glitch/components/display_name';\nimport { Icon } from 'flavours/glitch/components/icon';\nimport { IconButton } from 'flavours/glitch/components/icon_button';\nimport Permalink from 'flavours/glitch/components/permalink';\n\nimport NotificationOverlayContainer from '../containers/overlay_container';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nclass FollowRequest extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    onAuthorize: PropTypes.func.isRequired,\n    onReject: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  };\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  };\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  };\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  };\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  };\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { intl, hidden, account, onAuthorize, onReject, notification, unread } = this.props;\n\n    if (!account) {\n      return <div />;\n    }\n\n    if (hidden) {\n      return (\n        <>\n          {account.get('display_name')}\n          {account.get('username')}\n        </>\n      );\n    }\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow-request focusable', { unread })} tabIndex={0}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon id='user' fixedWidth />\n            </div>\n\n            <FormattedMessage\n              id='notification.follow_request'\n              defaultMessage='{name} has requested to follow you'\n              values={{ name: link }}\n            />\n          </div>\n\n          <div className='account'>\n            <div className='account__wrapper'>\n              <Permalink key={account.get('id')} className='account__display-name' title={account.get('acct')} href={account.get('url')} to={`/@${account.get('acct')}`}>\n                <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n                <DisplayName account={account} />\n              </Permalink>\n\n              <div className='account__relationship'>\n                <IconButton title={intl.formatMessage(messages.authorize)} icon='check' onClick={onAuthorize} />\n                <IconButton title={intl.formatMessage(messages.reject)} icon='times' onClick={onReject} />\n              </div>\n            </div>\n          </div>\n\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n\nexport default injectIntl(FollowRequest);\n","import { connect } from 'react-redux';\n\nimport { authorizeFollowRequest, rejectFollowRequest } from 'flavours/glitch/actions/accounts';\n\nimport FollowRequest from '../components/follow_request';\n\nconst mapDispatchToProps = (dispatch, { account }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(account.get('id')));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(account.get('id')));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(FollowRequest);\n","//  Package imports.\nimport PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { HotKeys } from 'react-hotkeys';\n\n\n// Our imports.\nimport { Icon } from 'flavours/glitch/components/icon';\nimport Permalink from 'flavours/glitch/components/permalink';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\n\nimport NotificationOverlayContainer from '../containers/overlay_container';\n\nexport default class NotificationFollow extends ImmutablePureComponent {\n\n  static propTypes = {\n    hidden: PropTypes.bool,\n    id: PropTypes.string.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  };\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  };\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  };\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  };\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  };\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { account, notification, hidden, unread } = this.props;\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    //  Renders.\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-admin-sign-up focusable', { unread })} tabIndex={0}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon fixedWidth id='user-plus' />\n            </div>\n\n            <FormattedMessage\n              id='notification.admin.sign_up'\n              defaultMessage='{name} signed up'\n              values={{ name: link }}\n            />\n          </div>\n\n          <AccountContainer hidden={hidden} id={account.get('id')} withNote={false} />\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","//  Package imports.\nimport PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { HotKeys } from 'react-hotkeys';\n\n\n// Our imports.\nimport { Icon } from 'flavours/glitch/components/icon';\nimport Permalink from 'flavours/glitch/components/permalink';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\n\nimport NotificationOverlayContainer from '../containers/overlay_container';\n\nexport default class NotificationFollow extends ImmutablePureComponent {\n\n  static propTypes = {\n    hidden: PropTypes.bool,\n    id: PropTypes.string.isRequired,\n    account: ImmutablePropTypes.map.isRequired,\n    notification: ImmutablePropTypes.map.isRequired,\n    unread: PropTypes.bool,\n  };\n\n  handleMoveUp = () => {\n    const { notification, onMoveUp } = this.props;\n    onMoveUp(notification.get('id'));\n  };\n\n  handleMoveDown = () => {\n    const { notification, onMoveDown } = this.props;\n    onMoveDown(notification.get('id'));\n  };\n\n  handleOpen = () => {\n    this.handleOpenProfile();\n  };\n\n  handleOpenProfile = () => {\n    const { notification } = this.props;\n    this.context.router.history.push(`/@${notification.getIn(['account', 'acct'])}`);\n  };\n\n  handleMention = e => {\n    e.preventDefault();\n\n    const { notification, onMention } = this.props;\n    onMention(notification.get('account'), this.context.router.history);\n  };\n\n  getHandlers () {\n    return {\n      moveUp: this.handleMoveUp,\n      moveDown: this.handleMoveDown,\n      open: this.handleOpen,\n      openProfile: this.handleOpenProfile,\n      mention: this.handleMention,\n      reply: this.handleMention,\n    };\n  }\n\n  render () {\n    const { account, notification, hidden, unread } = this.props;\n\n    //  Links to the display name.\n    const displayName = account.get('display_name_html') || account.get('username');\n    const link = (\n      <bdi><Permalink\n        className='notification__display-name'\n        href={account.get('url')}\n        title={account.get('acct')}\n        to={`/@${account.get('acct')}`}\n        dangerouslySetInnerHTML={{ __html: displayName }}\n      /></bdi>\n    );\n\n    //  Renders.\n    return (\n      <HotKeys handlers={this.getHandlers()}>\n        <div className={classNames('notification notification-follow focusable', { unread })} tabIndex={0}>\n          <div className='notification__message'>\n            <div className='notification__favourite-icon-wrapper'>\n              <Icon fixedWidth id='user-plus' />\n            </div>\n\n            <FormattedMessage\n              id='notification.follow'\n              defaultMessage='{name} followed you'\n              values={{ name: link }}\n            />\n          </div>\n\n          <AccountContainer hidden={hidden} id={account.get('id')} withNote={false} />\n          <NotificationOverlayContainer notification={notification} />\n        </div>\n      </HotKeys>\n    );\n  }\n\n}\n","//  Package imports.\nimport PropTypes from 'prop-types';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\n//  Our imports,\nimport StatusContainer from 'flavours/glitch/containers/status_container';\n\nimport NotificationAdminReportContainer from '../containers/admin_report_container';\nimport NotificationFollowRequestContainer from '../containers/follow_request_container';\n\nimport NotificationAdminSignup from './admin_signup';\nimport NotificationFollow from './follow';\n\nexport default class Notification extends ImmutablePureComponent {\n\n  static propTypes = {\n    notification: ImmutablePropTypes.map.isRequired,\n    hidden: PropTypes.bool,\n    onMoveUp: PropTypes.func.isRequired,\n    onMoveDown: PropTypes.func.isRequired,\n    onMention: PropTypes.func.isRequired,\n    getScrollPosition: PropTypes.func,\n    updateScrollBottom: PropTypes.func,\n    cacheMediaWidth: PropTypes.func,\n    cachedMediaWidth: PropTypes.number,\n    onUnmount: PropTypes.func,\n    unread: PropTypes.bool,\n  };\n\n  render () {\n    const {\n      hidden,\n      notification,\n      onMoveDown,\n      onMoveUp,\n      onMention,\n      getScrollPosition,\n      updateScrollBottom,\n    } = this.props;\n\n    switch(notification.get('type')) {\n    case 'follow':\n      return (\n        <NotificationFollow\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'follow_request':\n      return (\n        <NotificationFollowRequestContainer\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'admin.sign_up':\n      return (\n        <NotificationAdminSignup\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'admin.report':\n      return (\n        <NotificationAdminReportContainer\n          hidden={hidden}\n          id={notification.get('id')}\n          account={notification.get('account')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          unread={this.props.unread}\n        />\n      );\n    case 'mention':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'status':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='status'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'favourite':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='favourite'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'reblog':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='reblog'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'poll':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='poll'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    case 'update':\n      return (\n        <StatusContainer\n          containerId={notification.get('id')}\n          hidden={hidden}\n          id={notification.get('status')}\n          account={notification.get('account')}\n          prepend='update'\n          muted\n          notification={notification}\n          onMoveDown={onMoveDown}\n          onMoveUp={onMoveUp}\n          onMention={onMention}\n          contextType='notifications'\n          getScrollPosition={getScrollPosition}\n          updateScrollBottom={updateScrollBottom}\n          cachedMediaWidth={this.props.cachedMediaWidth}\n          cacheMediaWidth={this.props.cacheMediaWidth}\n          onUnmount={this.props.onUnmount}\n          withDismiss\n          unread={this.props.unread}\n        />\n      );\n    default:\n      return null;\n    }\n  }\n\n}\n","//  Package imports.\nimport { connect } from 'react-redux';\n\n//  Our imports.\nimport { mentionCompose } from 'flavours/glitch/actions/compose';\nimport { makeGetNotification } from 'flavours/glitch/selectors';\n\nimport Notification from '../components/notification';\n\nconst makeMapStateToProps = () => {\n  const getNotification = makeGetNotification();\n\n  const mapStateToProps = (state, props) => ({\n    notification: getNotification(state, props.notification, props.accountId),\n    notifCleaning: state.getIn(['notifications', 'cleaningMode']),\n  });\n\n  return mapStateToProps;\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onMention: (account, router) => {\n    dispatch(mentionCompose(account, router));\n  },\n});\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(Notification);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\nimport { createSelector } from 'reselect';\n\nimport { debounce } from 'lodash';\n\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { submitMarkers } from 'flavours/glitch/actions/markers';\nimport {\n  enterNotificationClearingMode,\n  expandNotifications,\n  scrollTopNotifications,\n  loadPending,\n  mountNotifications,\n  unmountNotifications,\n  markNotificationsAsRead,\n} from 'flavours/glitch/actions/notifications';\nimport { compareId } from 'flavours/glitch/compare_id';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { Icon } from 'flavours/glitch/components/icon';\nimport { LoadGap } from 'flavours/glitch/components/load_gap';\nimport { NotSignedInIndicator } from 'flavours/glitch/components/not_signed_in_indicator';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport NotificationPurgeButtonsContainer from 'flavours/glitch/containers/notification_purge_buttons_container';\n\nimport NotificationsPermissionBanner from './components/notifications_permission_banner';\nimport ColumnSettingsContainer from './containers/column_settings_container';\nimport FilterBarContainer from './containers/filter_bar_container';\nimport NotificationContainer from './containers/notification_container';\n\n\n\n\n\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  enterNotifCleaning : { id: 'notification_purge.start', defaultMessage: 'Enter notification cleaning mode' },\n  markAsRead : { id: 'notifications.mark_as_read', defaultMessage: 'Mark every notification as read' },\n});\n\nconst getExcludedTypes = createSelector([\n  state => state.getIn(['settings', 'notifications', 'shows']),\n], (shows) => {\n  return ImmutableList(shows.filter(item => !item).keys());\n});\n\nconst getNotifications = createSelector([\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  state => state.getIn(['settings', 'notifications', 'quickFilter', 'active']),\n  getExcludedTypes,\n  state => state.getIn(['notifications', 'items']),\n], (showFilterBar, allowedType, excludedTypes, notifications) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filterNot(item => item !== null && excludedTypes.includes(item.get('type')));\n  }\n  return notifications.filter(item => item === null || allowedType === item.get('type'));\n});\n\nconst mapStateToProps = state => ({\n  showFilterBar: state.getIn(['settings', 'notifications', 'quickFilter', 'show']),\n  notifications: getNotifications(state),\n  localSettings:  state.get('local_settings'),\n  isLoading: state.getIn(['notifications', 'isLoading'], 0) > 0,\n  isUnread: state.getIn(['notifications', 'unread']) > 0 || state.getIn(['notifications', 'pendingItems']).size > 0,\n  hasMore: state.getIn(['notifications', 'hasMore']),\n  numPending: state.getIn(['notifications', 'pendingItems'], ImmutableList()).size,\n  notifCleaningActive: state.getIn(['notifications', 'cleaningMode']),\n  lastReadId: state.getIn(['settings', 'notifications', 'showUnread']) ? state.getIn(['notifications', 'readMarkerId']) : '0',\n  canMarkAsRead: state.getIn(['settings', 'notifications', 'showUnread']) && state.getIn(['notifications', 'readMarkerId']) !== '0' && getNotifications(state).some(item => item !== null && compareId(item.get('id'), state.getIn(['notifications', 'readMarkerId'])) > 0),\n  needsNotificationPermission: state.getIn(['settings', 'notifications', 'alerts']).includes(true) && state.getIn(['notifications', 'browserSupport']) && state.getIn(['notifications', 'browserPermission']) === 'default' && !state.getIn(['settings', 'notifications', 'dismissPermissionBanner']),\n});\n\n/* glitch */\nconst mapDispatchToProps = dispatch => ({\n  onEnterCleaningMode(yes) {\n    dispatch(enterNotificationClearingMode(yes));\n  },\n  dispatch,\n});\n\nclass Notifications extends PureComponent {\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    columnId: PropTypes.string,\n    notifications: ImmutablePropTypes.list.isRequired,\n    showFilterBar: PropTypes.bool.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    isLoading: PropTypes.bool,\n    isUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    numPending: PropTypes.number,\n    localSettings: ImmutablePropTypes.map,\n    notifCleaningActive: PropTypes.bool,\n    onEnterCleaningMode: PropTypes.func,\n    lastReadId: PropTypes.string,\n    canMarkAsRead: PropTypes.bool,\n    needsNotificationPermission: PropTypes.bool,\n  };\n\n  static defaultProps = {\n    trackScroll: true,\n  };\n\n  state = {\n    animatingNCD: false,\n  };\n\n  componentDidMount() {\n    this.props.dispatch(mountNotifications());\n  }\n\n  componentWillUnmount () {\n    this.handleLoadOlder.cancel();\n    this.handleScrollToTop.cancel();\n    this.handleScroll.cancel();\n    // this.props.dispatch(scrollTopNotifications(false));\n    this.props.dispatch(unmountNotifications());\n  }\n\n  handleLoadGap = (maxId) => {\n    this.props.dispatch(expandNotifications({ maxId }));\n  };\n\n  handleLoadOlder = debounce(() => {\n    const last = this.props.notifications.last();\n    this.props.dispatch(expandNotifications({ maxId: last && last.get('id') }));\n  }, 300, { leading: true });\n\n  handleLoadPending = () => {\n    this.props.dispatch(loadPending());\n  };\n\n  handleScrollToTop = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(true));\n  }, 100);\n\n  handleScroll = debounce(() => {\n    this.props.dispatch(scrollTopNotifications(false));\n  }, 100);\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setColumnRef = c => {\n    this.column = c;\n  };\n\n  handleMoveUp = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) - 1;\n    this._selectChild(elementIndex, true);\n  };\n\n  handleMoveDown = id => {\n    const elementIndex = this.props.notifications.findIndex(item => item !== null && item.get('id') === id) + 1;\n    this._selectChild(elementIndex, false);\n  };\n\n  _selectChild (index, align_top) {\n    const container = this.column.node;\n    const element = container.querySelector(`article:nth-of-type(${index + 1}) .focusable`);\n\n    if (element) {\n      if (align_top && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (!align_top && container.scrollTop + container.clientHeight < element.offsetTop + element.offsetHeight) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }\n\n  handleTransitionEndNCD = () => {\n    this.setState({ animatingNCD: false });\n  };\n\n  onEnterCleaningMode = () => {\n    this.setState({ animatingNCD: true });\n    this.props.onEnterCleaningMode(!this.props.notifCleaningActive);\n  };\n\n  handleMarkAsRead = () => {\n    this.props.dispatch(markNotificationsAsRead());\n    this.props.dispatch(submitMarkers({ immediate: true }));\n  };\n\n  render () {\n    const { intl, notifications, isLoading, isUnread, columnId, multiColumn, hasMore, numPending, showFilterBar, lastReadId, canMarkAsRead, needsNotificationPermission } = this.props;\n    const { notifCleaningActive } = this.props;\n    const { animatingNCD } = this.state;\n    const pinned = !!columnId;\n    const emptyMessage = <FormattedMessage id='empty_column.notifications' defaultMessage=\"You don't have any notifications yet. When other people interact with you, you will see it here.\" />;\n    const { signedIn } = this.context.identity;\n\n    let scrollableContent = null;\n\n    const filterBarContainer = (signedIn && showFilterBar)\n      ? (<FilterBarContainer />)\n      : null;\n\n    if (isLoading && this.scrollableContent) {\n      scrollableContent = this.scrollableContent;\n    } else if (notifications.size > 0 || hasMore) {\n      scrollableContent = notifications.map((item, index) => item === null ? (\n        <LoadGap\n          key={'gap:' + notifications.getIn([index + 1, 'id'])}\n          disabled={isLoading}\n          maxId={index > 0 ? notifications.getIn([index - 1, 'id']) : null}\n          onClick={this.handleLoadGap}\n        />\n      ) : (\n        <NotificationContainer\n          key={item.get('id')}\n          notification={item}\n          accountId={item.get('account')}\n          onMoveUp={this.handleMoveUp}\n          onMoveDown={this.handleMoveDown}\n          unread={lastReadId !== '0' && compareId(item.get('id'), lastReadId) > 0}\n        />\n      ));\n    } else {\n      scrollableContent = null;\n    }\n\n    this.scrollableContent = scrollableContent;\n\n    let scrollContainer;\n\n    if (signedIn) {\n      scrollContainer = (\n        <ScrollableList\n          scrollKey={`notifications-${columnId}`}\n          trackScroll={!pinned}\n          isLoading={isLoading}\n          showLoading={isLoading && notifications.size === 0}\n          hasMore={hasMore}\n          numPending={numPending}\n          prepend={needsNotificationPermission && <NotificationsPermissionBanner />}\n          alwaysPrepend\n          emptyMessage={emptyMessage}\n          onLoadMore={this.handleLoadOlder}\n          onLoadPending={this.handleLoadPending}\n          onScrollToTop={this.handleScrollToTop}\n          onScroll={this.handleScroll}\n          bindToDocument={!multiColumn}\n        >\n          {scrollableContent}\n        </ScrollableList>\n      );\n    } else {\n      scrollContainer = <NotSignedInIndicator />;\n    }\n\n    const extraButtons = [];\n\n    if (canMarkAsRead) {\n      extraButtons.push(\n        <button\n          key='mark-as-read'\n          aria-label={intl.formatMessage(messages.markAsRead)}\n          title={intl.formatMessage(messages.markAsRead)}\n          onClick={this.handleMarkAsRead}\n          className='column-header__button'\n        >\n          <Icon id='check' />\n        </button>,\n      );\n    }\n\n    const notifCleaningButtonClassName = classNames('column-header__button', {\n      'active': notifCleaningActive,\n    });\n\n    const notifCleaningDrawerClassName = classNames('ncd column-header__collapsible', {\n      'collapsed': !notifCleaningActive,\n      'animating': animatingNCD,\n    });\n\n    const msgEnterNotifCleaning = intl.formatMessage(messages.enterNotifCleaning);\n\n    extraButtons.push(\n      <button\n        key='notif-cleaning'\n        aria-label={msgEnterNotifCleaning}\n        title={msgEnterNotifCleaning}\n        onClick={this.onEnterCleaningMode}\n        className={notifCleaningButtonClassName}\n      >\n        <Icon id='eraser' />\n      </button>,\n    );\n\n    const notifCleaningDrawer = (\n      <div className={notifCleaningDrawerClassName} onTransitionEnd={this.handleTransitionEndNCD}>\n        <div className='column-header__collapsible-inner nopad-drawer'>\n          {(notifCleaningActive || animatingNCD) ? (<NotificationPurgeButtonsContainer />) : null }\n        </div>\n      </div>\n    );\n\n    return (\n      <Column\n        bindToDocument={!multiColumn}\n        ref={this.setColumnRef}\n        name='notifications'\n        extraClasses={this.props.notifCleaningActive ? 'notif-cleaning' : null}\n        label={intl.formatMessage(messages.title)}\n      >\n        <ColumnHeader\n          icon='bell'\n          active={isUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          localSettings={this.props.localSettings}\n          extraButton={extraButtons}\n          appendContent={notifCleaningDrawer}\n        >\n          <ColumnSettingsContainer />\n        </ColumnHeader>\n\n        {filterBarContainer}\n        {scrollContainer}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Notifications));\n"],"sourceRoot":""}