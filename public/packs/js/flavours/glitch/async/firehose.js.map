{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/firehose/index.jsx"],"names":["messages","defineMessages","title","id","defaultMessage","filter_regex","ColumnSettings","intl","useIntl","dispatch","useAppDispatch","settings","useAppSelector","state","getIn","onChange","useCallback","key","checked","changeSetting","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","SettingText","formatMessage","Firehose","_ref","feedType","multiColumn","signedIn","initialState","meta","me","accountId","disabledAccountId","disabled_account_id","accessToken","access_token","permissions","role","columnRef","useRef","allowLocalOnly","regex","onlyMedia","hasUnread","handlePin","addColumn","other","body","onlyRemote","handleLoadMore","maxId","expandCommunityTimeline","expandPublicTimeline","handleHeaderClick","_columnRef$current","current","scrollTop","useEffect","disconnect","connectCommunityStream","connectPublicStream","prependBanner","DismissableBanner","values","domain","emptyMessage","_jsxs","Column","bindToDocument","ref","children","ColumnHeader","icon","active","onPin","onClick","NavLink","exact","to","tagName","StatusListContainer","prepend","timelineId","onLoadMore","trackScroll","scrollKey","Helmet","name","content"],"mappings":"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","file":"js/flavours/glitch/async/firehose.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { useRef, useCallback, useEffect } from 'react';\n\nimport { useIntl, defineMessages, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\nimport { NavLink } from 'react-router-dom';\n\nimport { addColumn } from 'flavours/glitch/actions/columns';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\nimport { connectPublicStream, connectCommunityStream } from 'flavours/glitch/actions/streaming';\nimport { expandPublicTimeline, expandCommunityTimeline } from 'flavours/glitch/actions/timelines';\nimport { DismissableBanner } from 'flavours/glitch/components/dismissable_banner';\nimport SettingText from 'flavours/glitch/components/setting_text';\nimport initialState, { domain } from 'flavours/glitch/initial_state';\nimport { useAppDispatch, useAppSelector } from 'flavours/glitch/store';\n\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport SettingToggle from '../notifications/components/setting_toggle';\nimport StatusListContainer from '../ui/containers/status_list_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.firehose', defaultMessage: 'Live feeds' },\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n});\n\n// TODO: use a proper React context later on\nconst useIdentity = () => ({\n  signedIn: !!initialState.meta.me,\n  accountId: initialState.meta.me,\n  disabledAccountId: initialState.meta.disabled_account_id,\n  accessToken: initialState.meta.access_token,\n  permissions: initialState.role ? initialState.role.permissions : 0,\n});\n\nconst ColumnSettings = () => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n  const settings = useAppSelector((state) => state.getIn(['settings', 'firehose']));\n  const onChange = useCallback(\n    (key, checked) => dispatch(changeSetting(['firehose', ...key], checked)),\n    [dispatch],\n  );\n\n  return (\n    <div>\n      <div className='column-settings__row'>\n        <SettingToggle\n          settings={settings}\n          settingPath={['onlyMedia']}\n          onChange={onChange}\n          label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />}\n        />\n        <SettingToggle\n          settings={settings}\n          settingPath={['allowLocalOnly']}\n          onChange={onChange}\n          label={<FormattedMessage id='firehose.column_settings.allow_local_only' defaultMessage='Show local-only posts in \"All\"' />}\n        />\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></span>\n        <SettingText\n          settings={settings}\n          settingPath={['regex', 'body']}\n          onChange={onChange}\n          label={intl.formatMessage(messages.filter_regex)}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst Firehose = ({ feedType, multiColumn }) => {\n  const dispatch = useAppDispatch();\n  const intl = useIntl();\n  const { signedIn } = useIdentity();\n  const columnRef = useRef(null);\n\n  const allowLocalOnly = useAppSelector((state) => state.getIn(['settings', 'firehose', 'allowLocalOnly']));\n  const regex = useAppSelector((state) => state.getIn(['settings', 'firehose', 'regex', 'body']));\n\n  const onlyMedia = useAppSelector((state) => state.getIn(['settings', 'firehose', 'onlyMedia'], false));\n  const hasUnread = useAppSelector((state) => state.getIn(['timelines', `${feedType}${feedType === 'public' && allowLocalOnly ? ':allow_local_only' : ''}${onlyMedia ? ':media' : ''}`, 'unread'], 0) > 0);\n\n  const handlePin = useCallback(\n    () => {\n      switch(feedType) {\n      case 'community':\n        dispatch(addColumn('COMMUNITY', { other: { onlyMedia }, regex: { body: regex } }));\n        break;\n      case 'public':\n        dispatch(addColumn('PUBLIC', { other: { onlyMedia, allowLocalOnly }, regex: { body: regex }  }));\n        break;\n      case 'public:remote':\n        dispatch(addColumn('REMOTE', { other: { onlyMedia, onlyRemote: true }, regex: { body: regex }  }));\n        break;\n      }\n    },\n    [dispatch, onlyMedia, feedType, allowLocalOnly, regex],\n  );\n\n  const handleLoadMore = useCallback(\n    (maxId) => {\n      switch(feedType) {\n      case 'community':\n        dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n        break;\n      case 'public':\n        dispatch(expandPublicTimeline({ maxId, onlyMedia, allowLocalOnly }));\n        break;\n      case 'public:remote':\n        dispatch(expandPublicTimeline({ maxId, onlyMedia, onlyRemote: true }));\n        break;\n      }\n    },\n    [dispatch, onlyMedia, allowLocalOnly, feedType],\n  );\n\n  const handleHeaderClick = useCallback(() => columnRef.current?.scrollTop(), []);\n\n  useEffect(() => {\n    let disconnect;\n\n    switch(feedType) {\n    case 'community':\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n      if (signedIn) {\n        disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n      }\n      break;\n    case 'public':\n      dispatch(expandPublicTimeline({ onlyMedia, allowLocalOnly }));\n      if (signedIn) {\n        disconnect = dispatch(connectPublicStream({ onlyMedia, allowLocalOnly }));\n      }\n      break;\n    case 'public:remote':\n      dispatch(expandPublicTimeline({ onlyMedia, onlyRemote: true }));\n      if (signedIn) {\n        disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote: true }));\n      }\n      break;\n    }\n\n    return () => disconnect?.();\n  }, [dispatch, signedIn, feedType, onlyMedia, allowLocalOnly]);\n\n  const prependBanner = feedType === 'community' ? (\n    <DismissableBanner id='community_timeline'>\n      <FormattedMessage\n        id='dismissable_banner.community_timeline'\n        defaultMessage='These are the most recent public posts from people whose accounts are hosted by {domain}.'\n        values={{ domain }}\n      />\n    </DismissableBanner>\n  ) : (\n    <DismissableBanner id='public_timeline'>\n      <FormattedMessage\n        id='dismissable_banner.public_timeline'\n        defaultMessage='These are the most recent public posts from people on the social web that people on {domain} follow.'\n        values={{ domain }}\n      />\n    </DismissableBanner>\n  );\n\n  const emptyMessage = feedType === 'community' ? (\n    <FormattedMessage\n      id='empty_column.community'\n      defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!'\n    />\n  ) : (\n    <FormattedMessage\n      id='empty_column.public'\n      defaultMessage='There is nothing here! Write something publicly, or manually follow users from other servers to fill it up'\n    />\n  );\n\n  return (\n    <Column bindToDocument={!multiColumn} ref={columnRef} label={intl.formatMessage(messages.title)}>\n      <ColumnHeader\n        icon='globe'\n        active={hasUnread}\n        title={intl.formatMessage(messages.title)}\n        onPin={handlePin}\n        onClick={handleHeaderClick}\n        multiColumn={multiColumn}\n      >\n        <ColumnSettings />\n      </ColumnHeader>\n\n      <div className='scrollable scrollable--flex'>\n        <div className='account__section-headline'>\n          <NavLink exact to='/public/local'>\n            <FormattedMessage tagName='div' id='firehose.local' defaultMessage='This server' />\n          </NavLink>\n\n          <NavLink exact to='/public/remote'>\n            <FormattedMessage tagName='div' id='firehose.remote' defaultMessage='Other servers' />\n          </NavLink>\n\n          <NavLink exact to='/public'>\n            <FormattedMessage tagName='div' id='firehose.all' defaultMessage='All' />\n          </NavLink>\n        </div>\n\n        <StatusListContainer\n          prepend={prependBanner}\n          timelineId={`${feedType}${feedType === 'public' && allowLocalOnly ? ':allow_local_only' : ''}${onlyMedia ? ':media' : ''}`}\n          onLoadMore={handleLoadMore}\n          trackScroll\n          scrollKey='firehose'\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          regex={regex}\n        />\n      </div>\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.title)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\nFirehose.propTypes = {\n  multiColumn: PropTypes.bool,\n  feedType: PropTypes.string,\n};\n\nexport default Firehose;\n"],"sourceRoot":""}