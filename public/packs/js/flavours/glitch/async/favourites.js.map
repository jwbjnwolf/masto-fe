{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/favourites/index.jsx"],"names":["messages","defineMessages","heading","id","defaultMessage","refresh","Favourites","ImmutablePureComponent","constructor","arguments","handleHeaderClick","this","column","scrollTop","setRef","c","handleRefresh","props","dispatch","fetchFavourites","params","statusId","handleLoadMore","_debounce","expandFavourites","leading","UNSAFE_componentWillMount","accountIds","render","intl","hasMore","isLoading","multiColumn","_jsx","Column","LoadingIndicator","emptyMessage","FormattedMessage","_jsxs","ref","children","ColumnHeader","icon","title","formatMessage","onClick","showBackButton","extraButton","className","Icon","ScrollableList","scrollKey","onLoadMore","bindToDocument","map","AccountContainer","withNote","Helmet","name","content","propTypes","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool","connect","mapStateToProps","state","getIn","injectIntl"],"mappings":"yRAqBA,MAAMA,EAAWC,YAAe,CAC9BC,QAAS,CAAEC,GAAG,uBAAyBC,eAAe,iBACtDC,QAAS,CAAEF,GAAG,UAAYC,eAAe,aAS3C,MAAME,UAAmBC,IAAuBC,cAAA,SAAAC,WAAA,KAkB9CC,kBAAoB,KAClBC,KAAKC,OAAOC,WAAW,EACvB,KAEFC,OAASC,IACPJ,KAAKC,OAASG,CAAC,EACf,KAEFC,cAAgB,KACdL,KAAKM,MAAMC,SAASC,YAAgBR,KAAKM,MAAMG,OAAOC,UAAU,EAChE,KAEFC,eAAiBC,KAAS,KACxBZ,KAAKM,MAAMC,SAASM,YAAiBb,KAAKM,MAAMG,OAAOC,UAAU,GAChE,IAAK,CAAEI,SAAS,GAAQ,CApB3BC,4BACOf,KAAKM,MAAMU,YACdhB,KAAKM,MAAMC,SAASC,YAAgBR,KAAKM,MAAMG,OAAOC,UAE1D,CAkBAO,SACE,MAAM,KAAEC,EAAI,WAAEF,EAAU,QAAEG,EAAO,UAAEC,EAAS,YAAEC,GAAgBrB,KAAKM,MAEnE,IAAKU,EACH,OACEM,YAACC,IAAM,UACLD,YAACE,IAAgB,KAKvB,MAAMC,EAAeH,YAACI,IAAgB,CAAClC,GAAE,0BAA2BC,eAAe,mFAEnF,OACEkC,eAACJ,IAAM,CAACK,IAAK5B,KAAKG,OAAO0B,SAAA,CACvBP,YAACQ,IAAY,CACXC,KAAK,OACLC,MAAOd,EAAKe,cAAc5C,EAASE,SACnC2C,QAASlC,KAAKD,kBACdoC,gBAAc,EACdd,YAAaA,EACbe,YACEd,YAAA,UAAQe,UAAU,wBAAwBL,MAAOd,EAAKe,cAAc5C,EAASK,SAAU,aAAYwB,EAAKe,cAAc5C,EAASK,SAAUwC,QAASlC,KAAKK,oBAAc,EAACiB,YAACgB,IAAI,CAAC9C,GAAG,eAGnL8B,YAACiB,IAAc,CACbC,UAAU,aACVC,WAAYzC,KAAKW,eACjBQ,QAASA,EACTC,UAAWA,EACXK,aAAcA,EACdiB,gBAAiBrB,QAAY,EAE5BL,EAAW2B,KAAInD,GACd8B,YAACsB,IAAgB,CAAUpD,GAAIA,EAAIqD,UAAU,GAAtBrD,MAI3B8B,YAACwB,IAAM,UACLxB,YAAA,QAAMyB,KAAK,SAASC,QAAQ,eAIpC,EA7EIrD,EAEGsD,UAAY,CACjBxC,OAAQyC,IAAUC,OAAOC,WACzB7C,SAAU2C,IAAUG,KAAKD,WACzBpC,WAAYsC,IAAmBC,KAC/BpC,QAAS+B,IAAUM,KACnBpC,UAAW8B,IAAUM,KACrBnC,YAAa6B,IAAUM,KACvBtC,KAAMgC,IAAUC,OAAOC,YAwEZK,6BAvFSC,CAACC,EAAOrD,KAAK,CACnCU,WAAY2C,EAAMC,MAAM,CAAC,aAAc,gBAAiBtD,EAAMG,OAAOC,SAAU,UAC/ES,UAAWwC,EAAMC,MAAM,CAAC,aAAc,gBAAiBtD,EAAMG,OAAOC,SAAU,SAC9EU,UAAWuC,EAAMC,MAAM,CAAC,aAAc,gBAAiBtD,EAAMG,OAAOC,SAAU,cAAc,MAoF/E+C,CAAyBI,YAAWlE,G","file":"js/flavours/glitch/async/favourites.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport { fetchFavourites, expandFavourites } from 'flavours/glitch/actions/interactions';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { Icon } from 'flavours/glitch/components/icon';\nimport { LoadingIndicator } from 'flavours/glitch/components/loading_indicator';\nimport ScrollableList from 'flavours/glitch/components/scrollable_list';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport Column from 'flavours/glitch/features/ui/components/column';\n\n\nconst messages = defineMessages({\n  heading: { id: 'column.favourited_by', defaultMessage: 'Favourited by' },\n  refresh: { id: 'refresh', defaultMessage: 'Refresh' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  accountIds: state.getIn(['user_lists', 'favourited_by', props.params.statusId, 'items']),\n  hasMore: !!state.getIn(['user_lists', 'favourited_by', props.params.statusId, 'next']),\n  isLoading: state.getIn(['user_lists', 'favourited_by', props.params.statusId, 'isLoading'], true),\n});\n\nclass Favourites extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  UNSAFE_componentWillMount () {\n    if (!this.props.accountIds) {\n      this.props.dispatch(fetchFavourites(this.props.params.statusId));\n    }\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleRefresh = () => {\n    this.props.dispatch(fetchFavourites(this.props.params.statusId));\n  };\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandFavourites(this.props.params.statusId));\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, isLoading, multiColumn } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='empty_column.favourites' defaultMessage='No one has favorited this post yet. When someone does, they will show up here.' />;\n\n    return (\n      <Column ref={this.setRef}>\n        <ColumnHeader\n          icon='star'\n          title={intl.formatMessage(messages.heading)}\n          onClick={this.handleHeaderClick}\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button className='column-header__button' title={intl.formatMessage(messages.refresh)} aria-label={intl.formatMessage(messages.refresh)} onClick={this.handleRefresh}><Icon id='refresh' /></button>\n          )}\n        />\n        <ScrollableList\n          scrollKey='favourites'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <AccountContainer key={id} id={id} withNote={false} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Favourites));\n"],"sourceRoot":""}