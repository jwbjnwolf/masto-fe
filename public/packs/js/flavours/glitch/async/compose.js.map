{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/compose/containers/navigation_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/utils/react_helpers.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/compose/components/header.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/compose/containers/header_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/compose/components/search_results.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/compose/containers/search_results_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/compose/index.jsx"],"names":["messages","defineMessages","logoutMessage","id","defaultMessage","logoutConfirm","injectIntl","connect","state","account","getIn","me","mapDispatchToProps","dispatch","_ref","intl","onLogout","openModal","modalType","modalProps","message","formatMessage","confirm","closeWhenConfirm","onConfirm","logOut","NavigationBar","conditionalRender","test","data","component","community","home_timeline","logout","notifications","public","settings","start","Header","ImmutablePureComponent","constructor","arguments","handleLogoutClick","e","preventDefault","stopPropagation","this","props","render","columns","unreadNotifications","showNotificationsBadge","onSettingsClick","renderForColumn","bind","columnId","some","column","get","_jsx","className","Link","title","to","Icon","onClick","href","signOutLink","propTypes","ImmutablePropTypes","list","PropTypes","number","bool","object","func","isRequired","INITIAL_PAGE_LIMIT","withoutLastResult","size","skipLast","SearchResults","handleLoadMoreAccounts","expandSearch","handleLoadMoreStatuses","handleLoadMoreHashtags","results","accounts","statuses","hashtags","SearchSection","_jsxs","_Fragment","children","fixedWidth","FormattedMessage","map","accountId","AccountContainer","LoadMore","visible","hashtag","Hashtag","statusId","StatusContainer","searchTerm","string","suggestions","fetchSuggestions","type","dismissSuggestion","compose","Compose","PureComponent","componentDidMount","onMount","componentWillUnmount","onUnmount","elefriend","multiColumn","onClickElefriend","showSearch","computedClass","classNames","role","HeaderContainer","SearchContainer","NavigationContainer","ComposeFormContainer","mascot","alt","draggable","src","Motion","defaultStyle","x","style","spring","stiffness","damping","transform","visibility","SearchResultsContainer","Column","Helmet","name","content","mapStateToProps","ownProps","cycleElefriendCompose","mountCompose","unmountCompose"],"mappings":"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","file":"js/flavours/glitch/async/compose.js","sourcesContent":["import { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect }   from 'react-redux';\n\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport { me } from 'flavours/glitch/initial_state';\nimport { logOut } from 'flavours/glitch/utils/log_out';\n\nimport NavigationBar from '../components/navigation_bar';\n\nconst messages = defineMessages({\n  logoutMessage: { id: 'confirmations.logout.message', defaultMessage: 'Are you sure you want to log out?' },\n  logoutConfirm: { id: 'confirmations.logout.confirm', defaultMessage: 'Log out' },\n});\n\nconst mapStateToProps = state => {\n  return {\n    account: state.getIn(['accounts', me]),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onLogout () {\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        message: intl.formatMessage(messages.logoutMessage),\n        confirm: intl.formatMessage(messages.logoutConfirm),\n        closeWhenConfirm: false,\n        onConfirm: () => logOut(),\n      },\n    }));\n  },\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(NavigationBar));\n","//  This function binds the given `handlers` to the `target`.\nexport function assignHandlers (target, handlers) {\n  if (!target || !handlers) {\n    return;\n  }\n\n  //  We just bind each handler to the `target`.\n  const handle = target.handlers = {};\n  Object.keys(handlers).forEach(\n    key => handle[key] = handlers[key].bind(target),\n  );\n}\n\n//  This function only returns the component if the result of calling\n//  `test` with `data` is `true`.  Useful with funciton binding.\nexport function conditionalRender (test, data, component) {\n  return test(data) ? component : null;\n}\n\n//  This object provides props to make the component not visible.\nexport const hiddenComponent = { style: { display: 'none' } };\n","import PropTypes from 'prop-types';\n\nimport { injectIntl, defineMessages } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { Icon } from 'flavours/glitch/components/icon';\nimport { signOutLink } from 'flavours/glitch/utils/backend_links';\nimport { conditionalRender } from 'flavours/glitch/utils/react_helpers';\n\nconst messages = defineMessages({\n  community: {\n    defaultMessage: 'Local timeline',\n    id: 'navigation_bar.community_timeline',\n  },\n  home_timeline: {\n    defaultMessage: 'Home',\n    id: 'tabs_bar.home',\n  },\n  logout: {\n    defaultMessage: 'Logout',\n    id: 'navigation_bar.logout',\n  },\n  notifications: {\n    defaultMessage: 'Notifications',\n    id: 'tabs_bar.notifications',\n  },\n  public: {\n    defaultMessage: 'Federated timeline',\n    id: 'navigation_bar.public_timeline',\n  },\n  settings: {\n    defaultMessage: 'App settings',\n    id: 'navigation_bar.app_settings',\n  },\n  start: {\n    defaultMessage: 'Getting started',\n    id: 'getting_started.heading',\n  },\n});\n\nclass Header extends ImmutablePureComponent {\n\n  static propTypes = {\n    columns: ImmutablePropTypes.list,\n    unreadNotifications: PropTypes.number,\n    showNotificationsBadge: PropTypes.bool,\n    intl: PropTypes.object,\n    onSettingsClick: PropTypes.func,\n    onLogout: PropTypes.func.isRequired,\n  };\n\n  handleLogoutClick = e => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    this.props.onLogout();\n\n    return false;\n  };\n\n  render () {\n    const { intl, columns, unreadNotifications, showNotificationsBadge, onSettingsClick } = this.props;\n\n    //  Only renders the component if the column isn't being shown.\n    const renderForColumn = conditionalRender.bind(null,\n      columnId => !columns || !columns.some(\n        column => column.get('id') === columnId,\n      ),\n    );\n\n    //  The result.\n    return (\n      <nav className='drawer__header'>\n        <Link\n          aria-label={intl.formatMessage(messages.start)}\n          title={intl.formatMessage(messages.start)}\n          to='/getting-started'\n        ><Icon id='asterisk' /></Link>\n        {renderForColumn('HOME', (\n          <Link\n            aria-label={intl.formatMessage(messages.home_timeline)}\n            title={intl.formatMessage(messages.home_timeline)}\n            to='/home'\n          ><Icon id='home' /></Link>\n        ))}\n        {renderForColumn('NOTIFICATIONS', (\n          <Link\n            aria-label={intl.formatMessage(messages.notifications)}\n            title={intl.formatMessage(messages.notifications)}\n            to='/notifications'\n          >\n            <span className='icon-badge-wrapper'>\n              <Icon id='bell' />\n              { showNotificationsBadge && unreadNotifications > 0 && <div className='icon-badge' />}\n            </span>\n          </Link>\n        ))}\n        {renderForColumn('COMMUNITY', (\n          <Link\n            aria-label={intl.formatMessage(messages.community)}\n            title={intl.formatMessage(messages.community)}\n            to='/public/local'\n          ><Icon id='users' /></Link>\n        ))}\n        {renderForColumn('PUBLIC', (\n          <Link\n            aria-label={intl.formatMessage(messages.public)}\n            title={intl.formatMessage(messages.public)}\n            to='/public'\n          ><Icon id='globe' /></Link>\n        ))}\n        <a\n          aria-label={intl.formatMessage(messages.settings)}\n          onClick={onSettingsClick}\n          href='/settings/preferences'\n          title={intl.formatMessage(messages.settings)}\n        ><Icon id='cogs' /></a>\n        <a\n          aria-label={intl.formatMessage(messages.logout)}\n          onClick={this.handleLogoutClick}\n          href={signOutLink}\n          title={intl.formatMessage(messages.logout)}\n        ><Icon id='sign-out' /></a>\n      </nav>\n    );\n  }\n\n}\n\nexport default injectIntl(Header);\n","import { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect }   from 'react-redux';\n\nimport { openModal } from 'flavours/glitch/actions/modal';\nimport { logOut } from 'flavours/glitch/utils/log_out';\n\nimport Header from '../components/header';\n\nconst messages = defineMessages({\n  logoutMessage: { id: 'confirmations.logout.message', defaultMessage: 'Are you sure you want to log out?' },\n  logoutConfirm: { id: 'confirmations.logout.confirm', defaultMessage: 'Log out' },\n});\n\nconst mapStateToProps = state => {\n  return {\n    columns: state.getIn(['settings', 'columns']),\n    unreadNotifications: state.getIn(['notifications', 'unread']),\n    showNotificationsBadge: state.getIn(['local_settings', 'notifications', 'tab_badge']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { intl }) => ({\n  onSettingsClick (e) {\n    e.preventDefault();\n    e.stopPropagation();\n    dispatch(openModal({ modalType: 'SETTINGS', modalProps: {} }));\n  },\n  onLogout () {\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        message: intl.formatMessage(messages.logoutMessage),\n        confirm: intl.formatMessage(messages.logoutConfirm),\n        closeWhenConfirm: false,\n        onConfirm: () => logOut(),\n      },\n    }));\n  },\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(Header));\n","import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { ImmutableHashtag as Hashtag } from 'flavours/glitch/components/hashtag';\nimport { Icon } from 'flavours/glitch/components/icon';\nimport { LoadMore } from 'flavours/glitch/components/load_more';\nimport AccountContainer from 'flavours/glitch/containers/account_container';\nimport StatusContainer from 'flavours/glitch/containers/status_container';\nimport { SearchSection } from 'flavours/glitch/features/explore/components/search_section';\n\nconst INITIAL_PAGE_LIMIT = 10;\n\nconst withoutLastResult = list => {\n  if (list.size > INITIAL_PAGE_LIMIT && list.size % INITIAL_PAGE_LIMIT === 1) {\n    return list.skipLast(1);\n  } else {\n    return list;\n  }\n};\n\nclass SearchResults extends ImmutablePureComponent {\n\n  static propTypes = {\n    results: ImmutablePropTypes.map.isRequired,\n    expandSearch: PropTypes.func.isRequired,\n    searchTerm: PropTypes.string,\n  };\n\n  handleLoadMoreAccounts = () => this.props.expandSearch('accounts');\n\n  handleLoadMoreStatuses = () => this.props.expandSearch('statuses');\n\n  handleLoadMoreHashtags = () => this.props.expandSearch('hashtags');\n\n  render () {\n    const { results } = this.props;\n\n    let accounts, statuses, hashtags;\n\n    if (results.get('accounts') && results.get('accounts').size > 0) {\n      accounts = (\n        <SearchSection title={<><Icon id='users' fixedWidth /><FormattedMessage id='search_results.accounts' defaultMessage='Profiles' /></>}>\n          {withoutLastResult(results.get('accounts')).map(accountId => <AccountContainer key={accountId} id={accountId} />)}\n          {(results.get('accounts').size > INITIAL_PAGE_LIMIT && results.get('accounts').size % INITIAL_PAGE_LIMIT === 1) && <LoadMore visible onClick={this.handleLoadMoreAccounts} />}\n        </SearchSection>\n      );\n    }\n\n    if (results.get('hashtags') && results.get('hashtags').size > 0) {\n      hashtags = (\n        <SearchSection title={<><Icon id='hashtag' fixedWidth /><FormattedMessage id='search_results.hashtags' defaultMessage='Hashtags' /></>}>\n          {withoutLastResult(results.get('hashtags')).map(hashtag => <Hashtag key={hashtag.get('name')} hashtag={hashtag} />)}\n          {(results.get('hashtags').size > INITIAL_PAGE_LIMIT && results.get('hashtags').size % INITIAL_PAGE_LIMIT === 1) && <LoadMore visible onClick={this.handleLoadMoreHashtags} />}\n        </SearchSection>\n      );\n    }\n\n    if (results.get('statuses') && results.get('statuses').size > 0) {\n      statuses = (\n        <SearchSection title={<><Icon id='quote-right' fixedWidth /><FormattedMessage id='search_results.statuses' defaultMessage='Posts' /></>}>\n          {withoutLastResult(results.get('statuses')).map(statusId => <StatusContainer key={statusId} id={statusId} />)}\n          {(results.get('statuses').size > INITIAL_PAGE_LIMIT && results.get('statuses').size % INITIAL_PAGE_LIMIT === 1) && <LoadMore visible onClick={this.handleLoadMoreStatuses} />}\n        </SearchSection>\n      );\n    }\n\n    return (\n      <div className='drawer--results'>\n        <header className='search-results__header'>\n          <Icon id='search' fixedWidth />\n          <FormattedMessage id='explore.search_results' defaultMessage='Search results' />\n        </header>\n\n        {accounts}\n        {hashtags}\n        {statuses}\n      </div>\n    );\n  }\n\n}\n\nexport default SearchResults;\n","import { connect } from 'react-redux';\n\nimport { expandSearch } from 'flavours/glitch/actions/search';\nimport { fetchSuggestions, dismissSuggestion } from 'flavours/glitch/actions/suggestions';\n\nimport SearchResults from '../components/search_results';\n\nconst mapStateToProps = state => ({\n  results: state.getIn(['search', 'results']),\n  suggestions: state.getIn(['suggestions', 'items']),\n  searchTerm: state.getIn(['search', 'searchTerm']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSuggestions: () => dispatch(fetchSuggestions()),\n  expandSearch: type => dispatch(expandSearch(type)),\n  dismissSuggestion: account => dispatch(dismissSuggestion(account.get('id'))),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchResults);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { injectIntl, defineMessages } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\n\nimport { connect } from 'react-redux';\n\nimport spring from 'react-motion/lib/spring';\n\nimport { mountCompose, unmountCompose, cycleElefriendCompose } from 'flavours/glitch/actions/compose';\nimport Column from 'flavours/glitch/components/column';\nimport { mascot } from 'flavours/glitch/initial_state';\n\nimport Motion from '../ui/util/optional_motion';\n\nimport ComposeFormContainer from './containers/compose_form_container';\nimport HeaderContainer from './containers/header_container';\nimport NavigationContainer from './containers/navigation_container';\nimport SearchContainer from './containers/search_container';\nimport SearchResultsContainer from './containers/search_results_container';\n\nconst messages = defineMessages({\n  compose: { id: 'navigation_bar.compose', defaultMessage: 'Compose new post' },\n});\n\nconst mapStateToProps = (state, ownProps) => ({\n  elefriend: state.getIn(['compose', 'elefriend']),\n  showSearch: ownProps.multiColumn ? state.getIn(['search', 'submitted']) && !state.getIn(['search', 'hidden']) : false,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onClickElefriend () {\n    dispatch(cycleElefriendCompose());\n  },\n\n  onMount () {\n    dispatch(mountCompose());\n  },\n\n  onUnmount () {\n    dispatch(unmountCompose());\n  },\n});\n\nclass Compose extends PureComponent {\n\n  static propTypes = {\n    multiColumn: PropTypes.bool,\n    showSearch: PropTypes.bool,\n    elefriend: PropTypes.number,\n    onClickElefriend: PropTypes.func,\n    onMount: PropTypes.func,\n    onUnmount: PropTypes.func,\n    intl: PropTypes.object.isRequired,\n  };\n\n  componentDidMount () {\n    this.props.onMount();\n  }\n\n  componentWillUnmount () {\n    this.props.onUnmount();\n  }\n\n  render () {\n    const {\n      elefriend,\n      intl,\n      multiColumn,\n      onClickElefriend,\n      showSearch,\n    } = this.props;\n    const computedClass = classNames('drawer', `mbstobon-${elefriend}`);\n\n    if (multiColumn) {\n      return (\n        <div className={computedClass} role='region' aria-label={intl.formatMessage(messages.compose)}>\n          <HeaderContainer />\n\n          {multiColumn && <SearchContainer />}\n\n          <div className='drawer__pager'>\n            <div className='drawer__inner'>\n              <NavigationContainer />\n\n              <ComposeFormContainer />\n\n              <div className='drawer__inner__mastodon'>\n                {mascot ? <img alt='' draggable='false' src={mascot} /> : <button className='mastodon' onClick={onClickElefriend} />}\n              </div>\n            </div>\n\n            <Motion defaultStyle={{ x: -100 }} style={{ x: spring(showSearch ? 0 : -100, { stiffness: 210, damping: 20 }) }}>\n              {({ x }) => (\n                <div className='drawer__inner darker' style={{ transform: `translateX(${x}%)`, visibility: x === -100 ? 'hidden' : 'visible' }}>\n                  <SearchResultsContainer />\n                </div>\n              )}\n            </Motion>\n          </div>\n        </div>\n      );\n    }\n\n    return (\n      <Column>\n        <NavigationContainer />\n        <ComposeFormContainer />\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(Compose));\n"],"sourceRoot":""}