{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/public_timeline/components/column_settings.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/public_timeline/containers/column_settings_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/public_timeline/index.jsx"],"names":["messages","defineMessages","filter_regex","id","defaultMessage","ColumnSettings","PureComponent","render","settings","onChange","intl","this","props","_jsx","className","SettingToggle","settingPath","label","FormattedMessage","getIn","SettingText","formatMessage","injectIntl","connect","mapStateToProps","state","_ref","columnId","uuid","columns","index","findIndex","c","get","mapDispatchToProps","dispatch","_ref2","key","checked","changeColumnParams","changeSetting","title","PublicTimeline","constructor","arguments","handlePin","onlyMedia","onlyRemote","allowLocalOnly","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandPublicTimeline","componentDidMount","signedIn","context","identity","disconnect","connectPublicStream","componentDidUpdate","prevProps","componentWillUnmount","hasUnread","multiColumn","pinned","_jsxs","Column","bindToDocument","ref","name","children","ColumnHeader","icon","active","onPin","onMove","onClick","ColumnSettingsContainer","StatusListContainer","prepend","DismissableBanner","values","domain","timelineId","onLoadMore","trackScroll","scrollKey","emptyMessage","regex","Helmet","content","defaultProps","contextTypes","router","PropTypes","object","timelineState"],"mappings":"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","file":"js/flavours/glitch/async/public_timeline.js","sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport SettingText from 'flavours/glitch/components/setting_text';\nimport SettingToggle from 'flavours/glitch/features/notifications/components/setting_toggle';\n\nconst messages = defineMessages({\n  filter_regex: { id: 'home.column_settings.filter_regex', defaultMessage: 'Filter out by regular expressions' },\n});\n\nclass ColumnSettings extends PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange, intl } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n          <SettingToggle settings={settings} settingPath={['other', 'onlyRemote']} onChange={onChange} label={<FormattedMessage id='community.column_settings.remote_only' defaultMessage='Remote only' />} />\n          {!settings.getIn(['other', 'onlyRemote']) && <SettingToggle settings={settings} settingPath={['other', 'allowLocalOnly']} onChange={onChange} label={<FormattedMessage id='community.column_settings.allow_local_only' defaultMessage='Show local-only toots' />} />}\n        </div>\n\n        <span className='column-settings__section'><FormattedMessage id='home.column_settings.advanced' defaultMessage='Advanced' /></span>\n\n        <div className='column-settings__row'>\n          <SettingText settings={settings} settingPath={['regex', 'body']} onChange={onChange} label={intl.formatMessage(messages.filter_regex)} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(ColumnSettings);\n","import { connect } from 'react-redux';\n\nimport { changeColumnParams } from 'flavours/glitch/actions/columns';\nimport { changeSetting } from 'flavours/glitch/actions/settings';\n\nimport ColumnSettings from '../components/column_settings';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'public']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['public', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { connect } from 'react-redux';\n\nimport { addColumn, removeColumn, moveColumn } from 'flavours/glitch/actions/columns';\nimport { connectPublicStream } from 'flavours/glitch/actions/streaming';\nimport { expandPublicTimeline } from 'flavours/glitch/actions/timelines';\nimport Column from 'flavours/glitch/components/column';\nimport ColumnHeader from 'flavours/glitch/components/column_header';\nimport { DismissableBanner } from 'flavours/glitch/components/dismissable_banner';\nimport StatusListContainer from 'flavours/glitch/features/ui/containers/status_list_container';\nimport { domain } from 'flavours/glitch/initial_state';\n\nimport ColumnSettingsContainer from './containers/column_settings_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.public', defaultMessage: 'Federated timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'public', 'other', 'onlyMedia']);\n  const onlyRemote = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyRemote']) : state.getIn(['settings', 'public', 'other', 'onlyRemote']);\n  const allowLocalOnly = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'allowLocalOnly']) : state.getIn(['settings', 'public', 'other', 'allowLocalOnly']);\n  const regex = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'regex', 'body']) : state.getIn(['settings', 'public', 'regex', 'body']);\n  const timelineState = state.getIn(['timelines', `public${onlyRemote ? ':remote' : allowLocalOnly ? ':allow_local_only' : ''}${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n    onlyRemote,\n    allowLocalOnly,\n    regex,\n  };\n};\n\nclass PublicTimeline extends PureComponent {\n\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static contextTypes = {\n    router: PropTypes.object,\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasUnread: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n    onlyRemote: PropTypes.bool,\n    allowLocalOnly: PropTypes.bool,\n    regex: PropTypes.string,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia, onlyRemote, allowLocalOnly } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn(onlyRemote ? 'REMOTE' : 'PUBLIC', { other: { onlyMedia, onlyRemote, allowLocalOnly } }));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, onlyMedia, onlyRemote, allowLocalOnly } = this.props;\n    const { signedIn } = this.context.identity;\n\n    dispatch(expandPublicTimeline({ onlyMedia, onlyRemote, allowLocalOnly }));\n    if (signedIn) {\n      this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote, allowLocalOnly }));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { signedIn } = this.context.identity;\n\n    if (prevProps.onlyMedia !== this.props.onlyMedia || prevProps.onlyRemote !== this.props.onlyRemote || prevProps.allowLocalOnly !== this.props.allowLocalOnly) {\n      const { dispatch, onlyMedia, onlyRemote, allowLocalOnly } = this.props;\n\n      if (this.disconnect) {\n        this.disconnect();\n      }\n\n      dispatch(expandPublicTimeline({ onlyMedia, onlyRemote, allowLocalOnly }));\n\n      if (signedIn) {\n        this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote, allowLocalOnly }));\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia, onlyRemote, allowLocalOnly } = this.props;\n\n    dispatch(expandPublicTimeline({ maxId, onlyMedia, onlyRemote, allowLocalOnly }));\n  };\n\n  render () {\n    const { intl, columnId, hasUnread, multiColumn, onlyMedia, onlyRemote, allowLocalOnly } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} name='federated' label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='globe'\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          prepend={<DismissableBanner id='public_timeline'><FormattedMessage id='dismissable_banner.public_timeline' defaultMessage='These are the most recent public posts from people on the social web that people on {domain} follow.' values={{ domain }} /></DismissableBanner>}\n          timelineId={`public${onlyRemote ? ':remote' : (allowLocalOnly ? ':allow_local_only' : '')}${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          trackScroll={!pinned}\n          scrollKey={`public_timeline-${columnId}`}\n          emptyMessage={<FormattedMessage id='empty_column.public' defaultMessage='There is nothing here! Write something publicly, or manually follow users from other servers to fill it up' />}\n          bindToDocument={!multiColumn}\n          regex={this.props.regex}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(PublicTimeline));\n"],"sourceRoot":""}