{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/account_timeline/index.jsx"],"names":["emptyList","ImmutableList","RemoteHint","_ref2","url","_jsx","TimelineHint","resource","FormattedMessage","id","defaultMessage","AccountTimeline","ImmutablePureComponent","constructor","arguments","handleHeaderClick","this","column","scrollTop","handleLoadMore","maxId","props","dispatch","expandAccountTimeline","accountId","withReplies","tagged","params","setRef","c","_load","fetchAccount","expandAccountFeaturedTimeline","fetchFeaturedTags","componentDidMount","acct","lookupAccount","componentDidUpdate","prevProps","UNSAFE_componentWillReceiveProps","nextProps","render","statusIds","featuredStatusIds","isLoading","hasMore","suspended","isAccount","hidden","multiColumn","remote","remoteUrl","isEmpty","Column","LoadingIndicator","BundleColumnError","errorType","emptyMessage","forceEmptyState","LimitedAccountHint","remoteMessage","_jsxs","ref","name","children","ProfileColumnHeader","onClick","StatusList","prepend","HeaderContainer","hideTabs","alwaysPrepend","append","scrollKey","onLoadMore","bindToDocument","timelineId","propTypes","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool","connect","mapStateToProps","state","_ref","getIn","normalizeForLookup","path","getAccountHidden"],"mappings":"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","file":"js/flavours/glitch/async/account_timeline.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { lookupAccount, fetchAccount } from 'flavours/glitch/actions/accounts';\nimport { TimelineHint } from 'flavours/glitch/components/timeline_hint';\nimport ProfileColumnHeader from 'flavours/glitch/features/account/components/profile_column_header';\nimport BundleColumnError from 'flavours/glitch/features/ui/components/bundle_column_error';\nimport { normalizeForLookup } from 'flavours/glitch/reducers/accounts_map';\nimport { getAccountHidden } from 'flavours/glitch/selectors';\n\nimport { fetchFeaturedTags } from '../../actions/featured_tags';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline } from '../../actions/timelines';\nimport { LoadingIndicator } from '../../components/loading_indicator';\nimport StatusList from '../../components/status_list';\nimport Column from '../ui/components/column';\n\nimport LimitedAccountHint from './components/limited_account_hint';\nimport HeaderContainer from './containers/header_container';\n\n\n\n\n\n\n\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { acct, id, tagged }, withReplies = false }) => {\n  const accountId = id || state.getIn(['accounts_map', normalizeForLookup(acct)]);\n\n  if (accountId === null) {\n    return {\n      isLoading: false,\n      isAccount: false,\n      statusIds: emptyList,\n    };\n  } else if (!accountId) {\n    return {\n      isLoading: true,\n      statusIds: emptyList,\n    };\n  }\n\n  const path = withReplies ? `${accountId}:with_replies` : `${accountId}${tagged ? `:${tagged}` : ''}`;\n\n  return {\n    accountId,\n    remote: !!(state.getIn(['accounts', accountId, 'acct']) !== state.getIn(['accounts', accountId, 'username'])),\n    remoteUrl: state.getIn(['accounts', accountId, 'url']),\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], ImmutableList()),\n    featuredStatusIds: withReplies ? ImmutableList() : state.getIn(['timelines', `account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'], ImmutableList()),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore:   state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n  };\n};\n\nconst RemoteHint = ({ url }) => (\n  <TimelineHint url={url} resource={<FormattedMessage id='timeline_hint.resources.statuses' defaultMessage='Older posts' />} />\n);\n\nRemoteHint.propTypes = {\n  url: PropTypes.string.isRequired,\n};\n\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n      tagged: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list,\n    featuredStatusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    remote: PropTypes.bool,\n    remoteUrl: PropTypes.string,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, withReplies, params: { tagged }, dispatch } = this.props;\n\n    dispatch(fetchAccount(accountId));\n\n    if (!withReplies) {\n      dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n    }\n\n    dispatch(fetchFeaturedTags(accountId));\n    dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct, tagged }, accountId, withReplies, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    } else if (prevProps.params.tagged !== tagged) {\n      if (!withReplies) {\n        dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n      }\n      dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n    }\n  }\n\n  UNSAFE_componentWillReceiveProps (nextProps) {\n    const { dispatch } = this.props;\n\n    if ((nextProps.params.accountId !== this.props.params.accountId && nextProps.params.accountId) || nextProps.withReplies !== this.props.withReplies) {\n      dispatch(fetchAccount(nextProps.params.accountId));\n\n      if (!nextProps.withReplies) {\n        dispatch(expandAccountFeaturedTimeline(nextProps.params.accountId));\n      }\n\n      dispatch(expandAccountTimeline(nextProps.params.accountId, { withReplies: nextProps.params.withReplies }));\n    }\n  }\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.accountId, { maxId, withReplies: this.props.withReplies, tagged: this.props.params.tagged }));\n  };\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  render () {\n    const { accountId, statusIds, featuredStatusIds, isLoading, hasMore, suspended, isAccount, hidden, multiColumn, remote, remoteUrl } = this.props;\n\n    if (isLoading && statusIds.isEmpty()) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    } else if (!isLoading && !isAccount) {\n      return (\n        <BundleColumnError multiColumn={multiColumn} errorType='routing' />\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (remote && statusIds.isEmpty()) {\n      emptyMessage = <RemoteHint url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='empty_column.account_timeline' defaultMessage='No posts found' />;\n    }\n\n    const remoteMessage = remote ? <RemoteHint url={remoteUrl} /> : null;\n\n    return (\n      <Column ref={this.setRef} name='account'>\n        <ProfileColumnHeader onClick={this.handleHeaderClick} multiColumn={multiColumn} />\n\n        <StatusList\n          prepend={<HeaderContainer accountId={this.props.accountId} hideTabs={forceEmptyState} tagged={this.props.params.tagged} />}\n          alwaysPrepend\n          append={remoteMessage}\n          scrollKey='account_timeline'\n          statusIds={forceEmptyState ? emptyList : statusIds}\n          featuredStatusIds={featuredStatusIds}\n          isLoading={isLoading}\n          hasMore={!forceEmptyState && hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          timelineId='account'\n        />\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(AccountTimeline);\n"],"sourceRoot":""}