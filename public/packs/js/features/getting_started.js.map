{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/mastodon/features/getting_started/components/trends.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/mastodon/features/getting_started/containers/trends_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/mastodon/features/getting_started/index.jsx"],"names":["Trends","ImmutablePureComponent","componentDidMount","this","props","fetchTrends","refreshInterval","setInterval","componentWillUnmount","clearInterval","render","trends","isEmpty","_jsx","className","Link","to","FormattedMessage","id","defaultMessage","take","map","hashtag","Hashtag","get","defaultProps","loading","propTypes","ImmutablePropTypes","list","PropTypes","func","isRequired","connect","state","getIn","dispatch","fetchTrendingHashtags","messages","defineMessages","home_timeline","notifications","public_timeline","settings_subheading","community_timeline","explore","direct","bookmarks","preferences","follow_requests","favourites","blocks","domain_blocks","mutes","pins","lists","discover","personal","security","menu","GettingStarted","fetchFollowRequests","signedIn","context","identity","intl","myAccount","multiColumn","unreadFollowRequests","navItems","badgeDisplay","number","limit","push","ColumnSubheading","text","formatMessage","showTrends","ColumnLink","icon","badge","href","Column","NavigationContainer","ColumnHeader","title","LinkFooter","TrendsContainer","Helmet","name","content","contextTypes","router","object","bool","unreadNotifications","me","ImmutableList","size","injectIntl"],"mappings":"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","file":"js/features/getting_started.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\n\nexport default class Trends extends ImmutablePureComponent {\n\n  static defaultProps = {\n    loading: false,\n  };\n\n  static propTypes = {\n    trends: ImmutablePropTypes.list,\n    fetchTrends: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    this.props.fetchTrends();\n    this.refreshInterval = setInterval(() => this.props.fetchTrends(), 900 * 1000);\n  }\n\n  componentWillUnmount () {\n    if (this.refreshInterval) {\n      clearInterval(this.refreshInterval);\n    }\n  }\n\n  render () {\n    const { trends } = this.props;\n\n    if (!trends || trends.isEmpty()) {\n      return null;\n    }\n\n    return (\n      <div className='getting-started__trends'>\n        <h4>\n          <Link to={'/explore/tags'}>\n            <FormattedMessage id='trends.trending_now' defaultMessage='Trending now' />\n          </Link>\n        </h4>\n\n        {trends.take(3).map(hashtag => <Hashtag key={hashtag.get('name')} hashtag={hashtag} />)}\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\n\nimport { fetchTrendingHashtags } from 'mastodon/actions/trends';\n\nimport Trends from '../components/trends';\n\nconst mapStateToProps = state => ({\n  trends: state.getIn(['trends', 'tags', 'items']),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchTrends: () => dispatch(fetchTrendingHashtags()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Trends);\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { fetchFollowRequests } from 'mastodon/actions/accounts';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport LinkFooter from 'mastodon/features/ui/components/link_footer';\n\nimport { me, showTrends } from '../../initial_state';\nimport NavigationContainer from '../compose/containers/navigation_container';\nimport ColumnLink from '../ui/components/column_link';\nimport ColumnSubheading from '../ui/components/column_subheading';\n\nimport TrendsContainer from './containers/trends_container';\n\nconst messages = defineMessages({\n  home_timeline: { id: 'tabs_bar.home', defaultMessage: 'Home' },\n  notifications: { id: 'tabs_bar.notifications', defaultMessage: 'Notifications' },\n  public_timeline: { id: 'navigation_bar.public_timeline', defaultMessage: 'Federated timeline' },\n  settings_subheading: { id: 'column_subheading.settings', defaultMessage: 'Settings' },\n  community_timeline: { id: 'navigation_bar.community_timeline', defaultMessage: 'Local timeline' },\n  explore: { id: 'navigation_bar.explore', defaultMessage: 'Explore' },\n  direct: { id: 'navigation_bar.direct', defaultMessage: 'Private mentions' },\n  bookmarks: { id: 'navigation_bar.bookmarks', defaultMessage: 'Bookmarks' },\n  preferences: { id: 'navigation_bar.preferences', defaultMessage: 'Preferences' },\n  follow_requests: { id: 'navigation_bar.follow_requests', defaultMessage: 'Follow requests' },\n  favourites: { id: 'navigation_bar.favourites', defaultMessage: 'Favorites' },\n  blocks: { id: 'navigation_bar.blocks', defaultMessage: 'Blocked users' },\n  domain_blocks: { id: 'navigation_bar.domain_blocks', defaultMessage: 'Blocked domains' },\n  mutes: { id: 'navigation_bar.mutes', defaultMessage: 'Muted users' },\n  pins: { id: 'navigation_bar.pins', defaultMessage: 'Pinned posts' },\n  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n  discover: { id: 'navigation_bar.discover', defaultMessage: 'Discover' },\n  personal: { id: 'navigation_bar.personal', defaultMessage: 'Personal' },\n  security: { id: 'navigation_bar.security', defaultMessage: 'Security' },\n  menu: { id: 'getting_started.heading', defaultMessage: 'Getting started' },\n});\n\nconst mapStateToProps = state => ({\n  myAccount: state.getIn(['accounts', me]),\n  unreadFollowRequests: state.getIn(['user_lists', 'follow_requests', 'items'], ImmutableList()).size,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchFollowRequests: () => dispatch(fetchFollowRequests()),\n});\n\nconst badgeDisplay = (number, limit) => {\n  if (number === 0) {\n    return undefined;\n  } else if (limit && number >= limit) {\n    return `${limit}+`;\n  } else {\n    return number;\n  }\n};\n\nclass GettingStarted extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    intl: PropTypes.object.isRequired,\n    myAccount: ImmutablePropTypes.map,\n    multiColumn: PropTypes.bool,\n    fetchFollowRequests: PropTypes.func.isRequired,\n    unreadFollowRequests: PropTypes.number,\n    unreadNotifications: PropTypes.number,\n  };\n\n  componentDidMount () {\n    const { fetchFollowRequests } = this.props;\n    const { signedIn } = this.context.identity;\n\n    if (!signedIn) {\n      return;\n    }\n\n    fetchFollowRequests();\n  }\n\n  render () {\n    const { intl, myAccount, multiColumn, unreadFollowRequests } = this.props;\n    const { signedIn } = this.context.identity;\n\n    const navItems = [];\n\n    navItems.push(\n      <ColumnSubheading key='header-discover' text={intl.formatMessage(messages.discover)} />,\n    );\n\n    if (showTrends) {\n      navItems.push(\n        <ColumnLink key='explore' icon='hashtag' text={intl.formatMessage(messages.explore)} to='/explore' />,\n      );\n    }\n\n    navItems.push(\n      <ColumnLink key='community_timeline' icon='users' text={intl.formatMessage(messages.community_timeline)} to='/public/local' />,\n      <ColumnLink key='public_timeline' icon='globe' text={intl.formatMessage(messages.public_timeline)} to='/public' />,\n    );\n\n    if (signedIn) {\n      navItems.push(\n        <ColumnSubheading key='header-personal' text={intl.formatMessage(messages.personal)} />,\n        <ColumnLink key='home' icon='home' text={intl.formatMessage(messages.home_timeline)} to='/home' />,\n        <ColumnLink key='direct' icon='at' text={intl.formatMessage(messages.direct)} to='/conversations' />,\n        <ColumnLink key='bookmark' icon='bookmark' text={intl.formatMessage(messages.bookmarks)} to='/bookmarks' />,\n        <ColumnLink key='favourites' icon='star' text={intl.formatMessage(messages.favourites)} to='/favourites' />,\n        <ColumnLink key='lists' icon='list-ul' text={intl.formatMessage(messages.lists)} to='/lists' />,\n      );\n\n      if (myAccount.get('locked') || unreadFollowRequests > 0) {\n        navItems.push(<ColumnLink key='follow_requests' icon='user-plus' text={intl.formatMessage(messages.follow_requests)} badge={badgeDisplay(unreadFollowRequests, 40)} to='/follow_requests' />);\n      }\n\n      navItems.push(\n        <ColumnSubheading key='header-settings' text={intl.formatMessage(messages.settings_subheading)} />,\n        <ColumnLink key='preferences' icon='gears' text={intl.formatMessage(messages.preferences)} href='/settings/preferences' />,\n      );\n    }\n\n    return (\n      <Column>\n        {(signedIn && !multiColumn) ? <NavigationContainer /> : <ColumnHeader title={intl.formatMessage(messages.menu)} icon='bars' multiColumn={multiColumn} />}\n\n        <div className='getting-started scrollable scrollable--flex'>\n          <div className='getting-started__wrapper'>\n            {navItems}\n          </div>\n\n          {!multiColumn && <div className='flex-spacer' />}\n\n          <LinkFooter multiColumn />\n        </div>\n\n        {(multiColumn && showTrends) && <TrendsContainer />}\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.menu)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(injectIntl(GettingStarted));\n"],"sourceRoot":""}