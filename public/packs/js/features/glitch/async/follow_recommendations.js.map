{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/follow_recommendations/components/account.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/flavours/glitch/features/follow_recommendations/index.jsx","webpack:///./app/javascript/images/elephant_ui_greeting.svg"],"names":["messages","defineMessages","follow","id","defaultMessage","unfollow","Account","ImmutablePureComponent","constructor","arguments","handleFollow","account","dispatch","this","props","getIn","unfollowAccount","get","followAccount","render","intl","button","_jsx","IconButton","icon","title","formatMessage","active","onClick","className","Permalink","href","to","Avatar","size","DisplayName","split","propTypes","ImmutablePropTypes","map","isRequired","PropTypes","object","func","connect","makeMapStateToProps","getAccount","makeGetAccount","mapStateToProps","state","injectIntl","FollowRecommendations","handleDone","router","context","requestBrowserPermission","permission","changeSetting","saveSettings","history","push","componentDidMount","suggestions","fetchSuggestions","componentWillUnmount","markAsPartial","isLoading","Column","viewBox","xlinkHref","FormattedMessage","_jsxs","_Fragment","children","suggestion","src","imageGreeting","alt","Button","Helmet","name","content","contextTypes","list","bool"],"mappings":"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","file":"js/features/glitch/async/follow_recommendations.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { injectIntl, defineMessages } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { followAccount, unfollowAccount } from 'flavours/glitch/actions/accounts';\nimport { Avatar } from 'flavours/glitch/components/avatar';\nimport { DisplayName } from 'flavours/glitch/components/display_name';\nimport { IconButton } from 'flavours/glitch/components/icon_button';\nimport Permalink from 'flavours/glitch/components/permalink';\nimport { makeGetAccount } from 'flavours/glitch/selectors';\n\nconst messages = defineMessages({\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, props) => ({\n    account: getAccount(state, props.id),\n  });\n\n  return mapStateToProps;\n};\n\nconst getFirstSentence = str => {\n  const arr = str.split(/(([.?!]+\\s)|[．。？！\\n•])/);\n\n  return arr[0];\n};\n\nclass Account extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.map.isRequired,\n    intl: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  handleFollow = () => {\n    const { account, dispatch } = this.props;\n\n    if (account.getIn(['relationship', 'following']) || account.getIn(['relationship', 'requested'])) {\n      dispatch(unfollowAccount(account.get('id')));\n    } else {\n      dispatch(followAccount(account.get('id')));\n    }\n  };\n\n  render () {\n    const { account, intl } = this.props;\n\n    let button;\n\n    if (account.getIn(['relationship', 'following'])) {\n      button = <IconButton icon='check' title={intl.formatMessage(messages.unfollow)} active onClick={this.handleFollow} />;\n    } else {\n      button = <IconButton icon='plus' title={intl.formatMessage(messages.follow)} onClick={this.handleFollow} />;\n    }\n\n    return (\n      <div className='account follow-recommendations-account'>\n        <div className='account__wrapper'>\n          <Permalink className='account__display-name account__display-name--with-note' title={account.get('acct')} href={account.get('url')} to={`/@${account.get('acct')}`}>\n            <div className='account__avatar-wrapper'><Avatar account={account} size={36} /></div>\n\n            <DisplayName account={account} />\n\n            <div className='account__note'>{getFirstSentence(account.get('note_plain'))}</div>\n          </Permalink>\n\n          <div className='account__relationship'>\n            {button}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(makeMapStateToProps)(injectIntl(Account));\n","import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { requestBrowserPermission } from 'flavours/glitch/actions/notifications';\nimport { changeSetting, saveSettings } from 'flavours/glitch/actions/settings';\nimport { fetchSuggestions } from 'flavours/glitch/actions/suggestions';\nimport { markAsPartial } from 'flavours/glitch/actions/timelines';\nimport Button from 'flavours/glitch/components/button';\nimport Column from 'flavours/glitch/features/ui/components/column';\nimport imageGreeting from 'mastodon/../images/elephant_ui_greeting.svg';\n\nimport Account from './components/account';\n\nconst mapStateToProps = state => ({\n  suggestions: state.getIn(['suggestions', 'items']),\n  isLoading: state.getIn(['suggestions', 'isLoading']),\n});\n\nclass FollowRecommendations extends ImmutablePureComponent {\n\n  static contextTypes = {\n    router: PropTypes.object.isRequired,\n  };\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    suggestions: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n  };\n\n  componentDidMount () {\n    const { dispatch, suggestions } = this.props;\n\n    // Don't re-fetch if we're e.g. navigating backwards to this page,\n    // since we don't want followed accounts to disappear from the list\n\n    if (suggestions.size === 0) {\n      dispatch(fetchSuggestions(true));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch } = this.props;\n\n    // Force the home timeline to be reloaded when the user navigates\n    // to it; if the user is new, it would've been empty before\n\n    dispatch(markAsPartial('home'));\n  }\n\n  handleDone = () => {\n    const { dispatch } = this.props;\n    const { router } = this.context;\n\n    dispatch(requestBrowserPermission((permission) => {\n      if (permission === 'granted') {\n        dispatch(changeSetting(['notifications', 'alerts', 'follow'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'favourite'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'reblog'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'mention'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'poll'], true));\n        dispatch(changeSetting(['notifications', 'alerts', 'status'], true));\n        dispatch(saveSettings());\n      }\n    }));\n\n    router.history.push('/home');\n  };\n\n  render () {\n    const { suggestions, isLoading } = this.props;\n\n    return (\n      <Column>\n        <div className='scrollable follow-recommendations-container'>\n          <div className='column-title'>\n            <svg viewBox='0 0 79 79' className='logo'>\n              <use xlinkHref='#logo-symbol-icon' />\n            </svg>\n\n            <h3><FormattedMessage id='follow_recommendations.heading' defaultMessage=\"Follow people you'd like to see posts from! Here are some suggestions.\" /></h3>\n            <p><FormattedMessage id='follow_recommendations.lead' defaultMessage=\"Posts from people you follow will show up in chronological order on your home feed. Don't be afraid to make mistakes, you can unfollow people just as easily any time!\" /></p>\n          </div>\n\n          {!isLoading && (\n            <>\n              <div className='column-list'>\n                {suggestions.size > 0 ? suggestions.map(suggestion => (\n                  <Account key={suggestion.get('account')} id={suggestion.get('account')} />\n                )) : (\n                  <div className='column-list__empty-message'>\n                    <FormattedMessage id='empty_column.follow_recommendations' defaultMessage='Looks like no suggestions could be generated for you. You can try using search to look for people you might know or explore trending hashtags.' />\n                  </div>\n                )}\n              </div>\n\n              <div className='column-actions'>\n                <img src={imageGreeting} alt='' className='column-actions__background' />\n                <Button onClick={this.handleDone}><FormattedMessage id='follow_recommendations.done' defaultMessage='Done' /></Button>\n              </div>\n            </>\n          )}\n        </div>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(FollowRecommendations);\n","export default __webpack_public_path__ + \"media/images/elephant_ui_greeting-530b368959aeb035f1ebb16fbc361c71.svg\";"],"sourceRoot":""}