{"version":3,"sources":["webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/mastodon/features/hashtag_timeline/components/hashtag_header.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/mastodon/features/hashtag_timeline/components/column_settings.jsx","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/mastodon/features/hashtag_timeline/containers/column_settings_container.js","webpack:///app/javascript/Users/jase/Github/masto-fe-standalone/app/javascript/mastodon/features/hashtag_timeline/index.jsx"],"names":["messages","defineMessages","followHashtag","id","defaultMessage","unfollowHashtag","usesRenderer","displayNumber","pluralReady","_jsx","FormattedMessage","values","count","counter","peopleRenderer","usesTodayRenderer","HashtagHeader","injectIntl","_ref","tag","intl","disabled","onClick","uses","people","get","reduce","arr","day","dividingCircle","className","Button","text","formatMessage","ShortNumber","value","renderer","getIn","placeholder","noOptions","ColumnSettings","PureComponent","constructor","arguments","state","open","this","hasTags","onSelect","mode","oldValue","tags","length","props","onChange","onToggle","setState","noOptionsMessage","map","includes","settings","toJS","modeSelect","modeLabel","NonceProvider","nonce","document","querySelector","content","cacheKey","AsyncSelect","isMulti","autoFocus","loadOptions","onLoad","classNamePrefix","name","render","Toggle","checked","SettingToggle","settingPath","label","connect","mapStateToProps","columnId","columns","index","findIndex","c","api","params","q","type","then","response","data","hashtags","mapDispatchToProps","dispatch","_ref2","key","changeColumnParams","HashtagTimeline","disconnects","handlePin","removeColumn","addColumn","title","additionalFor","push","additional","join","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","local","expandHashtagTimeline","handleFollow","signedIn","context","identity","_subscribe","any","all","none","connectHashtagStream","status","filter","_unsubscribe","disconnect","_unload","clearTimeline","_load","fetchHashtag","componentDidMount","componentDidUpdate","prevProps","_isEqual","componentWillUnmount","hasUnread","multiColumn","pinned","_jsxs","Column","bindToDocument","ref","children","ColumnHeader","icon","active","onPin","onMove","showBackButton","ColumnSettingsContainer","StatusListContainer","prepend","alwaysPrepend","trackScroll","scrollKey","timelineId","onLoadMore","emptyMessage","Helmet","contextTypes","PropTypes","object"],"mappings":"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","file":"js/features/hashtag_timeline.js","sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport Button from 'mastodon/components/button';\nimport { ShortNumber } from 'mastodon/components/short_number';\n\nconst messages = defineMessages({\n  followHashtag: { id: 'hashtag.follow', defaultMessage: 'Follow hashtag' },\n  unfollowHashtag: { id: 'hashtag.unfollow', defaultMessage: 'Unfollow hashtag' },\n});\n\nconst usesRenderer = (displayNumber, pluralReady) => (\n  <FormattedMessage\n    id='hashtag.counter_by_uses'\n    defaultMessage='{count, plural, one {{counter} post} other {{counter} posts}}'\n    values={{\n      count: pluralReady,\n      counter: <strong>{displayNumber}</strong>,\n    }}\n  />\n);\n\nconst peopleRenderer = (displayNumber, pluralReady) => (\n  <FormattedMessage\n    id='hashtag.counter_by_accounts'\n    defaultMessage='{count, plural, one {{counter} participant} other {{counter} participants}}'\n    values={{\n      count: pluralReady,\n      counter: <strong>{displayNumber}</strong>,\n    }}\n  />\n);\n\nconst usesTodayRenderer = (displayNumber, pluralReady) => (\n  <FormattedMessage\n    id='hashtag.counter_by_uses_today'\n    defaultMessage='{count, plural, one {{counter} post} other {{counter} posts}} today'\n    values={{\n      count: pluralReady,\n      counter: <strong>{displayNumber}</strong>,\n    }}\n  />\n);\n\nexport const HashtagHeader = injectIntl(({ tag, intl, disabled, onClick }) => {\n  if (!tag) {\n    return null;\n  }\n\n  const [uses, people] = tag.get('history').reduce((arr, day) => [arr[0] + day.get('uses') * 1, arr[1] + day.get('accounts') * 1], [0, 0]);\n  const dividingCircle = <span aria-hidden>{' · '}</span>;\n\n  return (\n    <div className='hashtag-header'>\n      <div className='hashtag-header__header'>\n        <h1>#{tag.get('name')}</h1>\n        <Button onClick={onClick} text={intl.formatMessage(tag.get('following') ? messages.unfollowHashtag : messages.followHashtag)} disabled={disabled} />\n      </div>\n\n      <div>\n        <ShortNumber value={uses} renderer={usesRenderer} />\n        {dividingCircle}\n        <ShortNumber value={people} renderer={peopleRenderer} />\n        {dividingCircle}\n        <ShortNumber value={tag.getIn(['history', 0, 'uses']) * 1} renderer={usesTodayRenderer} />\n      </div>\n    </div>\n  );\n});\n\nHashtagHeader.propTypes = {\n  tag: ImmutablePropTypes.map,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  intl: PropTypes.object,\n};","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { NonceProvider } from 'react-select';\nimport AsyncSelect from 'react-select/async';\nimport Toggle from 'react-toggle';\n\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nconst messages = defineMessages({\n  placeholder: { id: 'hashtag.column_settings.select.placeholder', defaultMessage: 'Enter hashtags…' },\n  noOptions: { id: 'hashtag.column_settings.select.no_options_message', defaultMessage: 'No suggestions found' },\n});\n\nclass ColumnSettings extends PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onLoad: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  state = {\n    open: this.hasTags(),\n  };\n\n  hasTags () {\n    return ['all', 'any', 'none'].map(mode => this.tags(mode).length > 0).includes(true);\n  }\n\n  tags (mode) {\n    let tags = this.props.settings.getIn(['tags', mode]) || [];\n\n    if (tags.toJS) {\n      return tags.toJS();\n    } else {\n      return tags;\n    }\n  }\n\n  onSelect = mode => value => {\n    const oldValue = this.tags(mode);\n\n    // Prevent changes that add more than 4 tags, but allow removing\n    // tags that were already added before\n    if ((value.length > 4) && !(value < oldValue)) {\n      return;\n    }\n\n    this.props.onChange(['tags', mode], value);\n  };\n\n  onToggle = () => {\n    if (this.state.open && this.hasTags()) {\n      this.props.onChange('tags', {});\n    }\n\n    this.setState({ open: !this.state.open });\n  };\n\n  noOptionsMessage = () => this.props.intl.formatMessage(messages.noOptions);\n\n  modeSelect (mode) {\n    return (\n      <div className='column-settings__row'>\n        <span className='column-settings__section'>\n          {this.modeLabel(mode)}\n        </span>\n\n        <NonceProvider nonce={document.querySelector('meta[name=style-nonce]').content} cacheKey='tags'>\n          <AsyncSelect\n            isMulti\n            autoFocus\n            value={this.tags(mode)}\n            onChange={this.onSelect(mode)}\n            loadOptions={this.props.onLoad}\n            className='column-select__container'\n            classNamePrefix='column-select'\n            name='tags'\n            placeholder={this.props.intl.formatMessage(messages.placeholder)}\n            noOptionsMessage={this.noOptionsMessage}\n          />\n        </NonceProvider>\n      </div>\n    );\n  }\n\n  modeLabel (mode) {\n    switch(mode) {\n    case 'any':\n      return <FormattedMessage id='hashtag.column_settings.tag_mode.any' defaultMessage='Any of these' />;\n    case 'all':\n      return <FormattedMessage id='hashtag.column_settings.tag_mode.all' defaultMessage='All of these' />;\n    case 'none':\n      return <FormattedMessage id='hashtag.column_settings.tag_mode.none' defaultMessage='None of these' />;\n    default:\n      return '';\n    }\n  }\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div>\n        <div className='column-settings__row'>\n          <div className='setting-toggle'>\n            <Toggle id='hashtag.column_settings.tag_toggle' onChange={this.onToggle} checked={this.state.open} />\n\n            <span className='setting-toggle__label'>\n              <FormattedMessage id='hashtag.column_settings.tag_toggle' defaultMessage='Include additional tags in this column' />\n            </span>\n          </div>\n        </div>\n\n        {this.state.open && (\n          <div className='column-settings__hashtags'>\n            {this.modeSelect('any')}\n            {this.modeSelect('all')}\n            {this.modeSelect('none')}\n          </div>\n        )}\n\n        <div className='column-settings__row'>\n          <SettingToggle settings={settings} settingPath={['local']} onChange={onChange} label={<FormattedMessage id='community.column_settings.local_only' defaultMessage='Local only' />} />\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(ColumnSettings);\n","import { connect } from 'react-redux';\n\nimport { changeColumnParams } from '../../../actions/columns';\nimport api from '../../../api';\nimport ColumnSettings from '../components/column_settings';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const columns = state.getIn(['settings', 'columns']);\n  const index   = columns.findIndex(c => c.get('uuid') === columnId);\n\n  if (!(columnId && index >= 0)) {\n    return {};\n  }\n\n  return {\n    settings: columns.get(index).get('params'),\n    onLoad (value) {\n      return api(() => state).get('/api/v2/search', { params: { q: value, type: 'hashtags' } }).then(response => {\n        return (response.data.hashtags || []).map((tag) => {\n          return { value: tag.name, label: `#${tag.name}` };\n        });\n      });\n    },\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => ({\n  onChange (key, value) {\n    dispatch(changeColumnParams(columnId, key, value));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { isEqual } from 'lodash';\n\nimport { addColumn, removeColumn, moveColumn } from 'mastodon/actions/columns';\nimport { connectHashtagStream } from 'mastodon/actions/streaming';\nimport { fetchHashtag, followHashtag, unfollowHashtag } from 'mastodon/actions/tags';\nimport { expandHashtagTimeline, clearTimeline } from 'mastodon/actions/timelines';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\n\nimport StatusListContainer from '../ui/containers/status_list_container';\n\nimport { HashtagHeader } from './components/hashtag_header';\nimport ColumnSettingsContainer from './containers/column_settings_container';\n\nconst mapStateToProps = (state, props) => ({\n  hasUnread: state.getIn(['timelines', `hashtag:${props.params.id}${props.params.local ? ':local' : ''}`, 'unread']) > 0,\n  tag: state.getIn(['tags', props.params.id]),\n});\n\nclass HashtagTimeline extends PureComponent {\n\n  disconnects = [];\n\n  static contextTypes = {\n    identity: PropTypes.object,\n  };\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    hasUnread: PropTypes.bool,\n    tag: ImmutablePropTypes.map,\n    multiColumn: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('HASHTAG', { id: this.props.params.id }));\n    }\n  };\n\n  title = () => {\n    const { id } = this.props.params;\n    const title  = [id];\n\n    if (this.additionalFor('any')) {\n      title.push(' ', <FormattedMessage key='any' id='hashtag.column_header.tag_mode.any'  values={{ additional: this.additionalFor('any') }} defaultMessage='or {additional}' />);\n    }\n\n    if (this.additionalFor('all')) {\n      title.push(' ', <FormattedMessage key='all' id='hashtag.column_header.tag_mode.all'  values={{ additional: this.additionalFor('all') }} defaultMessage='and {additional}' />);\n    }\n\n    if (this.additionalFor('none')) {\n      title.push(' ', <FormattedMessage key='none' id='hashtag.column_header.tag_mode.none' values={{ additional: this.additionalFor('none') }} defaultMessage='without {additional}' />);\n    }\n\n    return title;\n  };\n\n  additionalFor = (mode) => {\n    const { tags } = this.props.params;\n\n    if (tags && (tags[mode] || []).length > 0) {\n      return tags[mode].map(tag => tag.value).join('/');\n    } else {\n      return '';\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  _subscribe (dispatch, id, tags = {}, local) {\n    const { signedIn } = this.context.identity;\n\n    if (!signedIn) {\n      return;\n    }\n\n    let any  = (tags.any || []).map(tag => tag.value);\n    let all  = (tags.all || []).map(tag => tag.value);\n    let none = (tags.none || []).map(tag => tag.value);\n\n    [id, ...any].map(tag => {\n      this.disconnects.push(dispatch(connectHashtagStream(id, tag, local, status => {\n        let tags = status.tags.map(tag => tag.name);\n\n        return all.filter(tag => tags.includes(tag)).length === all.length &&\n               none.filter(tag => tags.includes(tag)).length === 0;\n      })));\n    });\n  }\n\n  _unsubscribe () {\n    this.disconnects.map(disconnect => disconnect());\n    this.disconnects = [];\n  }\n\n  _unload () {\n    const { dispatch } = this.props;\n    const { id, local } = this.props.params;\n\n    this._unsubscribe();\n    dispatch(clearTimeline(`hashtag:${id}${local ? ':local' : ''}`));\n  }\n\n  _load() {\n    const { dispatch } = this.props;\n    const { id, tags, local } = this.props.params;\n\n    this._subscribe(dispatch, id, tags, local);\n    dispatch(expandHashtagTimeline(id, { tags, local }));\n    dispatch(fetchHashtag(id));\n  }\n\n  componentDidMount () {\n    this._load();\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params } = this.props;\n    const { id, tags, local } = prevProps.params;\n\n    if (id !== params.id || !isEqual(tags, params.tags) || !isEqual(local, params.local)) {\n      this._unload();\n      this._load();\n    }\n  }\n\n  componentWillUnmount () {\n    this._unsubscribe();\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, params } = this.props;\n    const { id, tags, local }  = params;\n\n    dispatch(expandHashtagTimeline(id, { maxId, tags, local }));\n  };\n\n  handleFollow = () => {\n    const { dispatch, params, tag } = this.props;\n    const { id } = params;\n    const { signedIn } = this.context.identity;\n\n    if (!signedIn) {\n      return;\n    }\n\n    if (tag.get('following')) {\n      dispatch(unfollowHashtag(id));\n    } else {\n      dispatch(followHashtag(id));\n    }\n  };\n\n  render () {\n    const { hasUnread, columnId, multiColumn, tag } = this.props;\n    const { id, local } = this.props.params;\n    const pinned = !!columnId;\n    const { signedIn } = this.context.identity;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={`#${id}`}>\n        <ColumnHeader\n          icon='hashtag'\n          active={hasUnread}\n          title={this.title()}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n          showBackButton\n        >\n          {columnId && <ColumnSettingsContainer columnId={columnId} />}\n        </ColumnHeader>\n\n        <StatusListContainer\n          prepend={pinned ? null : <HashtagHeader tag={tag} disabled={!signedIn} onClick={this.handleFollow} />}\n          alwaysPrepend\n          trackScroll={!pinned}\n          scrollKey={`hashtag_timeline-${columnId}`}\n          timelineId={`hashtag:${id}${local ? ':local' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.hashtag' defaultMessage='There is nothing in this hashtag yet.' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>#{id}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(HashtagTimeline);\n"],"sourceRoot":""}